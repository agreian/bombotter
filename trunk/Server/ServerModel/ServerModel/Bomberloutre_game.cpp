// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Bomberloutre_game.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Bomberloutre_game.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __Bomberloutre__GameWaitRoom__newUserInRoom_name = "newUserInRoom";

static const ::std::string __Bomberloutre__GameWaitRoom__userLeftRoom_name = "userLeftRoom";

static const ::std::string __Bomberloutre__GameWaitRoom__kickPlayer_name = "kickPlayer";

static const ::std::string __Bomberloutre__GameWaitRoom__invitePlayer_name = "invitePlayer";

static const ::std::string __Bomberloutre__GameWaitRoom__userReady_name = "userReady";

static const ::std::string __Bomberloutre__GameWaitRoom__allUsersReady_name = "allUsersReady";

static const ::std::string __Bomberloutre__Game__addBot_name = "addBot";

static const ::std::string __Bomberloutre__Game__removeBot_name = "removeBot";

static const ::std::string __Bomberloutre__Game__createMap_name = "createMap";

static const ::std::string __Bomberloutre__Game__startMap_name = "startMap";

static const ::std::string __Bomberloutre__Game__endMap_name = "endMap";

static const ::std::string __Bomberloutre__GamesManager__getGameList_name = "getGameList";

static const ::std::string __Bomberloutre__GamesManager__getUserList_name = "getUserList";

static const ::std::string __Bomberloutre__GamesManager__createGame_name = "createGame";

static const ::std::string __Bomberloutre__GamesManager__joinGame_name = "joinGame";

static const ::std::string __Bomberloutre__GamesManager__removeGame_name = "removeGame";

::Ice::Object* IceInternal::upCast(::Bomberloutre::GameWaitRoom* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::GameWaitRoom* p) { return p; }

::Ice::Object* IceInternal::upCast(::Bomberloutre::Game* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::Game* p) { return p; }

::Ice::Object* IceInternal::upCast(::Bomberloutre::GamesManager* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::GamesManager* p) { return p; }

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::GameWaitRoomPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::GameWaitRoom;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::GamePrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::Game;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::GamesManagerPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::GamesManager;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__writeRoomList(::IceInternal::BasicStream* __os, const ::Bomberloutre::GameWaitRoomPrx* begin, const ::Bomberloutre::GameWaitRoomPrx* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(begin[i].get())));
    }
}

void
Bomberloutre::__readRoomList(::IceInternal::BasicStream* __is, ::Bomberloutre::RoomList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(2, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        ::Bomberloutre::__read(__is, v[i]);
    }
}

void
Bomberloutre::__writeGameList(::IceInternal::BasicStream* __os, const ::Bomberloutre::GamePtr* begin, const ::Bomberloutre::GamePtr* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(begin[i].get())));
    }
}

void
Bomberloutre::__readGameList(::IceInternal::BasicStream* __is, ::Bomberloutre::GameList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(4, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        __is->read(::Bomberloutre::__patch__GamePtr, &v[i]);
    }
}

void
IceProxy::Bomberloutre::GameWaitRoom::newUserInRoom(const ::std::string& username, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GameWaitRoom* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GameWaitRoom*>(__delBase.get());
            __del->newUserInRoom(username, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GameWaitRoom::begin_newUserInRoom(const ::std::string& username, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GameWaitRoom__newUserInRoom_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GameWaitRoom__newUserInRoom_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(username);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::GameWaitRoom::end_newUserInRoom(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__GameWaitRoom__newUserInRoom_name);
}

void
IceProxy::Bomberloutre::GameWaitRoom::userLeftRoom(const ::std::string& username, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GameWaitRoom* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GameWaitRoom*>(__delBase.get());
            __del->userLeftRoom(username, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GameWaitRoom::begin_userLeftRoom(const ::std::string& username, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GameWaitRoom__userLeftRoom_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GameWaitRoom__userLeftRoom_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(username);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::GameWaitRoom::end_userLeftRoom(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__GameWaitRoom__userLeftRoom_name);
}

void
IceProxy::Bomberloutre::GameWaitRoom::kickPlayer(const ::std::string& username, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GameWaitRoom* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GameWaitRoom*>(__delBase.get());
            __del->kickPlayer(username, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GameWaitRoom::begin_kickPlayer(const ::std::string& username, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GameWaitRoom__kickPlayer_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GameWaitRoom__kickPlayer_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(username);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::GameWaitRoom::end_kickPlayer(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__GameWaitRoom__kickPlayer_name);
}

void
IceProxy::Bomberloutre::GameWaitRoom::invitePlayer(const ::std::string& username, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GameWaitRoom* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GameWaitRoom*>(__delBase.get());
            __del->invitePlayer(username, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GameWaitRoom::begin_invitePlayer(const ::std::string& username, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GameWaitRoom__invitePlayer_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GameWaitRoom__invitePlayer_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(username);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::GameWaitRoom::end_invitePlayer(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__GameWaitRoom__invitePlayer_name);
}

void
IceProxy::Bomberloutre::GameWaitRoom::userReady(const ::std::string& username, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GameWaitRoom* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GameWaitRoom*>(__delBase.get());
            __del->userReady(username, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GameWaitRoom::begin_userReady(const ::std::string& username, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GameWaitRoom__userReady_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GameWaitRoom__userReady_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(username);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::GameWaitRoom::end_userReady(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__GameWaitRoom__userReady_name);
}

void
IceProxy::Bomberloutre::GameWaitRoom::allUsersReady(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GameWaitRoom* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GameWaitRoom*>(__delBase.get());
            __del->allUsersReady(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GameWaitRoom::begin_allUsersReady(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GameWaitRoom__allUsersReady_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GameWaitRoom__allUsersReady_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::GameWaitRoom::end_allUsersReady(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__GameWaitRoom__allUsersReady_name);
}

const ::std::string&
IceProxy::Bomberloutre::GameWaitRoom::ice_staticId()
{
    return ::Bomberloutre::GameWaitRoom::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::GameWaitRoom::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::GameWaitRoom);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::GameWaitRoom::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::GameWaitRoom);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::GameWaitRoom::__newInstance() const
{
    return new GameWaitRoom;
}

void
IceProxy::Bomberloutre::Game::addBot(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Game* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Game*>(__delBase.get());
            __del->addBot(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Game::begin_addBot(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Game__addBot_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Game__addBot_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Game::end_addBot(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Game__addBot_name);
}

void
IceProxy::Bomberloutre::Game::removeBot(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Game* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Game*>(__delBase.get());
            __del->removeBot(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Game::begin_removeBot(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Game__removeBot_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Game__removeBot_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Game::end_removeBot(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Game__removeBot_name);
}

bool
IceProxy::Bomberloutre::Game::createMap(const ::std::string& mode, const ::std::string& mapSkin, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__Game__createMap_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Game* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Game*>(__delBase.get());
            return __del->createMap(mode, mapSkin, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Game::begin_createMap(const ::std::string& mode, const ::std::string& mapSkin, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__Game__createMap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Game__createMap_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Game__createMap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(mode);
        __os->write(mapSkin);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Bomberloutre::Game::end_createMap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__Game__createMap_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::Bomberloutre::Game::startMap(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Game* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Game*>(__delBase.get());
            __del->startMap(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Game::begin_startMap(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Game__startMap_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Game__startMap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Game::end_startMap(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Game__startMap_name);
}

void
IceProxy::Bomberloutre::Game::endMap(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Game* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Game*>(__delBase.get());
            __del->endMap(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Game::begin_endMap(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Game__endMap_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Game__endMap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Game::end_endMap(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Game__endMap_name);
}

const ::std::string&
IceProxy::Bomberloutre::Game::ice_staticId()
{
    return ::Bomberloutre::Game::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::Game::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::Game);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::Game::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::Game);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::Game::__newInstance() const
{
    return new Game;
}

::Bomberloutre::GameList
IceProxy::Bomberloutre::GamesManager::getGameList(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__GamesManager__getGameList_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GamesManager* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GamesManager*>(__delBase.get());
            return __del->getGameList(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GamesManager::begin_getGameList(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__GamesManager__getGameList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GamesManager__getGameList_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GamesManager__getGameList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Bomberloutre::GameList
IceProxy::Bomberloutre::GamesManager::end_getGameList(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__GamesManager__getGameList_name);
    ::Bomberloutre::GameList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::Bomberloutre::__readGameList(__is, __ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

::Bomberloutre::UserList
IceProxy::Bomberloutre::GamesManager::getUserList(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__GamesManager__getUserList_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GamesManager* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GamesManager*>(__delBase.get());
            return __del->getUserList(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GamesManager::begin_getUserList(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__GamesManager__getUserList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GamesManager__getUserList_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GamesManager__getUserList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Bomberloutre::UserList
IceProxy::Bomberloutre::GamesManager::end_getUserList(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__GamesManager__getUserList_name);
    ::Bomberloutre::UserList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::Bomberloutre::__readUserList(__is, __ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

::Bomberloutre::GamePtr
IceProxy::Bomberloutre::GamesManager::createGame(const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__GamesManager__createGame_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GamesManager* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GamesManager*>(__delBase.get());
            return __del->createGame(name, room, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GamesManager::begin_createGame(const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__GamesManager__createGame_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GamesManager__createGame_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GamesManager__createGame_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(name);
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(room.get())));
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Bomberloutre::GamePtr
IceProxy::Bomberloutre::GamesManager::end_createGame(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__GamesManager__createGame_name);
    ::Bomberloutre::GamePtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(::Bomberloutre::__patch__GamePtr, &__ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::Bomberloutre::GamesManager::joinGame(const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Bomberloutre::MapObserverPrx& mo, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__GamesManager__joinGame_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GamesManager* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GamesManager*>(__delBase.get());
            return __del->joinGame(name, room, mo, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GamesManager::begin_joinGame(const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Bomberloutre::MapObserverPrx& mo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__GamesManager__joinGame_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GamesManager__joinGame_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GamesManager__joinGame_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(name);
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(room.get())));
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(mo.get())));
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Bomberloutre::GamesManager::end_joinGame(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__GamesManager__joinGame_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

bool
IceProxy::Bomberloutre::GamesManager::removeGame(const ::std::string& name, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__GamesManager__removeGame_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::GamesManager* __del = dynamic_cast< ::IceDelegate::Bomberloutre::GamesManager*>(__delBase.get());
            return __del->removeGame(name, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::GamesManager::begin_removeGame(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__GamesManager__removeGame_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__GamesManager__removeGame_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__GamesManager__removeGame_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(name);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Bomberloutre::GamesManager::end_removeGame(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__GamesManager__removeGame_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::Bomberloutre::GamesManager::ice_staticId()
{
    return ::Bomberloutre::GamesManager::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::GamesManager::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::GamesManager);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::GamesManager::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::GamesManager);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::GamesManager::__newInstance() const
{
    return new GamesManager;
}

void
IceDelegateM::Bomberloutre::GameWaitRoom::newUserInRoom(const ::std::string& username, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GameWaitRoom__newUserInRoom_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(username);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::GameWaitRoom::userLeftRoom(const ::std::string& username, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GameWaitRoom__userLeftRoom_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(username);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::GameWaitRoom::kickPlayer(const ::std::string& username, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GameWaitRoom__kickPlayer_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(username);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::GameWaitRoom::invitePlayer(const ::std::string& username, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GameWaitRoom__invitePlayer_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(username);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::GameWaitRoom::userReady(const ::std::string& username, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GameWaitRoom__userReady_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(username);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::GameWaitRoom::allUsersReady(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GameWaitRoom__allUsersReady_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::Game::addBot(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Game__addBot_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::Game::removeBot(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Game__removeBot_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

bool
IceDelegateM::Bomberloutre::Game::createMap(const ::std::string& mode, const ::std::string& mapSkin, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Game__createMap_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(mode);
        __os->write(mapSkin);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Bomberloutre::Game::startMap(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Game__startMap_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::Game::endMap(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Game__endMap_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Bomberloutre::GameList
IceDelegateM::Bomberloutre::GamesManager::getGameList(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GamesManager__getGameList_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::Bomberloutre::GameList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::Bomberloutre::__readGameList(__is, __ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Bomberloutre::UserList
IceDelegateM::Bomberloutre::GamesManager::getUserList(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GamesManager__getUserList_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::Bomberloutre::UserList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::Bomberloutre::__readUserList(__is, __ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Bomberloutre::GamePtr
IceDelegateM::Bomberloutre::GamesManager::createGame(const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GamesManager__createGame_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(name);
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(room.get())));
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Bomberloutre::GamePtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(::Bomberloutre::__patch__GamePtr, &__ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Bomberloutre::GamesManager::joinGame(const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Bomberloutre::MapObserverPrx& mo, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GamesManager__joinGame_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(name);
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(room.get())));
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(mo.get())));
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Bomberloutre::GamesManager::removeGame(const ::std::string& name, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__GamesManager__removeGame_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(name);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::Bomberloutre::GameWaitRoom::newUserInRoom(const ::std::string& username, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& username, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_username(username)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GameWaitRoom* servant = dynamic_cast< ::Bomberloutre::GameWaitRoom*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->newUserInRoom(_m_username, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_username;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GameWaitRoom__newUserInRoom_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(username, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::GameWaitRoom::userLeftRoom(const ::std::string& username, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& username, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_username(username)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GameWaitRoom* servant = dynamic_cast< ::Bomberloutre::GameWaitRoom*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->userLeftRoom(_m_username, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_username;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GameWaitRoom__userLeftRoom_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(username, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::GameWaitRoom::kickPlayer(const ::std::string& username, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& username, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_username(username)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GameWaitRoom* servant = dynamic_cast< ::Bomberloutre::GameWaitRoom*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->kickPlayer(_m_username, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_username;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GameWaitRoom__kickPlayer_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(username, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::GameWaitRoom::invitePlayer(const ::std::string& username, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& username, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_username(username)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GameWaitRoom* servant = dynamic_cast< ::Bomberloutre::GameWaitRoom*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->invitePlayer(_m_username, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_username;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GameWaitRoom__invitePlayer_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(username, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::GameWaitRoom::userReady(const ::std::string& username, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& username, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_username(username)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GameWaitRoom* servant = dynamic_cast< ::Bomberloutre::GameWaitRoom*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->userReady(_m_username, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_username;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GameWaitRoom__userReady_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(username, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::GameWaitRoom::allUsersReady(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GameWaitRoom* servant = dynamic_cast< ::Bomberloutre::GameWaitRoom*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->allUsersReady(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GameWaitRoom__allUsersReady_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::Game::addBot(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Game* servant = dynamic_cast< ::Bomberloutre::Game*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->addBot(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Game__addBot_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::Game::removeBot(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Game* servant = dynamic_cast< ::Bomberloutre::Game*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->removeBot(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Game__removeBot_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::Bomberloutre::Game::createMap(const ::std::string& mode, const ::std::string& mapSkin, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& mode, const ::std::string& mapSkin, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_mode(mode),
            _m_mapSkin(mapSkin)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Game* servant = dynamic_cast< ::Bomberloutre::Game*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->createMap(_m_mode, _m_mapSkin, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_mode;
        const ::std::string& _m_mapSkin;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Game__createMap_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, mode, mapSkin, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Bomberloutre::Game::startMap(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Game* servant = dynamic_cast< ::Bomberloutre::Game*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->startMap(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Game__startMap_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::Game::endMap(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Game* servant = dynamic_cast< ::Bomberloutre::Game*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->endMap(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Game__endMap_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Bomberloutre::GameList
IceDelegateD::Bomberloutre::GamesManager::getGameList(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Bomberloutre::GameList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GamesManager* servant = dynamic_cast< ::Bomberloutre::GamesManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getGameList(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Bomberloutre::GameList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GamesManager__getGameList_name, ::Ice::Normal, __context);
    ::Bomberloutre::GameList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Bomberloutre::UserList
IceDelegateD::Bomberloutre::GamesManager::getUserList(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Bomberloutre::UserList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GamesManager* servant = dynamic_cast< ::Bomberloutre::GamesManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getUserList(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Bomberloutre::UserList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GamesManager__getUserList_name, ::Ice::Normal, __context);
    ::Bomberloutre::UserList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Bomberloutre::GamePtr
IceDelegateD::Bomberloutre::GamesManager::createGame(const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Bomberloutre::GamePtr& __result, const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_name(name),
            _m_room(room)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GamesManager* servant = dynamic_cast< ::Bomberloutre::GamesManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->createGame(_m_name, _m_room, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Bomberloutre::GamePtr& _result;
        const ::std::string& _m_name;
        const ::Bomberloutre::GameWaitRoomPrx& _m_room;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GamesManager__createGame_name, ::Ice::Normal, __context);
    ::Bomberloutre::GamePtr __result;
    try
    {
        _DirectI __direct(__result, name, room, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Bomberloutre::GamesManager::joinGame(const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Bomberloutre::MapObserverPrx& mo, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& name, const ::Bomberloutre::GameWaitRoomPrx& room, const ::Bomberloutre::MapObserverPrx& mo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_name(name),
            _m_room(room),
            _m_mo(mo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GamesManager* servant = dynamic_cast< ::Bomberloutre::GamesManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->joinGame(_m_name, _m_room, _m_mo, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_name;
        const ::Bomberloutre::GameWaitRoomPrx& _m_room;
        const ::Bomberloutre::MapObserverPrx& _m_mo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GamesManager__joinGame_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, name, room, mo, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Bomberloutre::GamesManager::removeGame(const ::std::string& name, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& name, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_name(name)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::GamesManager* servant = dynamic_cast< ::Bomberloutre::GamesManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->removeGame(_m_name, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_name;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__GamesManager__removeGame_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, name, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPtr
Bomberloutre::GameWaitRoom::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__GameWaitRoom_ids[2] =
{
    "::Bomberloutre::GameWaitRoom",
    "::Ice::Object"
};

bool
Bomberloutre::GameWaitRoom::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__GameWaitRoom_ids, __Bomberloutre__GameWaitRoom_ids + 2, _s);
}

::std::vector< ::std::string>
Bomberloutre::GameWaitRoom::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__GameWaitRoom_ids[0], &__Bomberloutre__GameWaitRoom_ids[2]);
}

const ::std::string&
Bomberloutre::GameWaitRoom::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__GameWaitRoom_ids[0];
}

const ::std::string&
Bomberloutre::GameWaitRoom::ice_staticId()
{
    return __Bomberloutre__GameWaitRoom_ids[0];
}

::Ice::DispatchStatus
Bomberloutre::GameWaitRoom::___newUserInRoom(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string username;
    __is->read(username);
    __is->endReadEncaps();
    newUserInRoom(username, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::GameWaitRoom::___userLeftRoom(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string username;
    __is->read(username);
    __is->endReadEncaps();
    userLeftRoom(username, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::GameWaitRoom::___kickPlayer(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string username;
    __is->read(username);
    __is->endReadEncaps();
    kickPlayer(username, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::GameWaitRoom::___invitePlayer(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string username;
    __is->read(username);
    __is->endReadEncaps();
    invitePlayer(username, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::GameWaitRoom::___userReady(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string username;
    __is->read(username);
    __is->endReadEncaps();
    userReady(username, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::GameWaitRoom::___allUsersReady(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    allUsersReady(__current);
    return ::Ice::DispatchOK;
}

static ::std::string __Bomberloutre__GameWaitRoom_all[] =
{
    "allUsersReady",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "invitePlayer",
    "kickPlayer",
    "newUserInRoom",
    "userLeftRoom",
    "userReady"
};

::Ice::DispatchStatus
Bomberloutre::GameWaitRoom::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__GameWaitRoom_all, __Bomberloutre__GameWaitRoom_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__GameWaitRoom_all)
    {
        case 0:
        {
            return ___allUsersReady(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___invitePlayer(in, current);
        }
        case 6:
        {
            return ___kickPlayer(in, current);
        }
        case 7:
        {
            return ___newUserInRoom(in, current);
        }
        case 8:
        {
            return ___userLeftRoom(in, current);
        }
        case 9:
        {
            return ___userReady(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::GameWaitRoom::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Bomberloutre::GameWaitRoom::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::GameWaitRoom::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::GameWaitRoom was not generated with stream support";
    throw ex;
}

void
Bomberloutre::GameWaitRoom::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::GameWaitRoom was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__GameWaitRoomPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::GameWaitRoomPtr* p = static_cast< ::Bomberloutre::GameWaitRoomPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::GameWaitRoomPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::GameWaitRoom::ice_staticId(), v->ice_id());
    }
}

Bomberloutre::Game::Game(const ::std::string& __ice_name, ::Ice::Int __ice_state, ::Ice::Int __ice_nbRound, const ::Bomberloutre::RoomList& __ice_rooms, const ::Bomberloutre::MapPtr& __ice_currentMap) :
    name(__ice_name),
    state(__ice_state),
    nbRound(__ice_nbRound),
    rooms(__ice_rooms),
    currentMap(__ice_currentMap)
{
}

::Ice::ObjectPtr
Bomberloutre::Game::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__Game_ids[2] =
{
    "::Bomberloutre::Game",
    "::Ice::Object"
};

bool
Bomberloutre::Game::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__Game_ids, __Bomberloutre__Game_ids + 2, _s);
}

::std::vector< ::std::string>
Bomberloutre::Game::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__Game_ids[0], &__Bomberloutre__Game_ids[2]);
}

const ::std::string&
Bomberloutre::Game::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__Game_ids[0];
}

const ::std::string&
Bomberloutre::Game::ice_staticId()
{
    return __Bomberloutre__Game_ids[0];
}

void
Bomberloutre::Game::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Bomberloutre::Game::__usesClasses()
{
    return true;
}

void
Bomberloutre::Game::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(currentMap)
    {
        ::IceInternal::upCast(currentMap.get())->__addObject(_c);
    }
}

void
Bomberloutre::Game::__gcClear()
{
    if(currentMap)
    {
        if(::IceInternal::upCast(currentMap.get())->__usesClasses())
        {
            ::IceInternal::upCast(currentMap.get())->__decRefUnsafe();
            currentMap.__clearHandleUnsafe();
        }
        else
        {
            currentMap = 0;
        }
    }
}

::Ice::DispatchStatus
Bomberloutre::Game::___addBot(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    addBot(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Game::___removeBot(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    removeBot(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Game::___createMap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string mode;
    ::std::string mapSkin;
    __is->read(mode);
    __is->read(mapSkin);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = createMap(mode, mapSkin, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Game::___startMap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    startMap(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Game::___endMap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    endMap(__current);
    return ::Ice::DispatchOK;
}

static ::std::string __Bomberloutre__Game_all[] =
{
    "addBot",
    "createMap",
    "endMap",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "removeBot",
    "startMap"
};

::Ice::DispatchStatus
Bomberloutre::Game::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__Game_all, __Bomberloutre__Game_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__Game_all)
    {
        case 0:
        {
            return ___addBot(in, current);
        }
        case 1:
        {
            return ___createMap(in, current);
        }
        case 2:
        {
            return ___endMap(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___removeBot(in, current);
        }
        case 8:
        {
            return ___startMap(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::Game::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->write(name);
    __os->write(state);
    __os->write(nbRound);
    if(rooms.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Bomberloutre::__writeRoomList(__os, &rooms[0], &rooms[0] + rooms.size());
    }
    __os->write(::Ice::ObjectPtr(::IceInternal::upCast(currentMap.get())));
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Bomberloutre::Game::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->read(name);
    __is->read(state);
    __is->read(nbRound);
    ::Bomberloutre::__readRoomList(__is, rooms);
    __is->read(::Bomberloutre::__patch__MapPtr, &currentMap);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::Game::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::Game was not generated with stream support";
    throw ex;
}

void
Bomberloutre::Game::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::Game was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__GamePtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::GamePtr* p = static_cast< ::Bomberloutre::GamePtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::GamePtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::Game::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
Bomberloutre::GamesManager::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__GamesManager_ids[2] =
{
    "::Bomberloutre::GamesManager",
    "::Ice::Object"
};

bool
Bomberloutre::GamesManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__GamesManager_ids, __Bomberloutre__GamesManager_ids + 2, _s);
}

::std::vector< ::std::string>
Bomberloutre::GamesManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__GamesManager_ids[0], &__Bomberloutre__GamesManager_ids[2]);
}

const ::std::string&
Bomberloutre::GamesManager::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__GamesManager_ids[0];
}

const ::std::string&
Bomberloutre::GamesManager::ice_staticId()
{
    return __Bomberloutre__GamesManager_ids[0];
}

::Ice::DispatchStatus
Bomberloutre::GamesManager::___getGameList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Bomberloutre::GameList __ret = getGameList(__current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Bomberloutre::__writeGameList(__os, &__ret[0], &__ret[0] + __ret.size());
    }
    __os->writePendingObjects();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::GamesManager::___getUserList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Bomberloutre::UserList __ret = getUserList(__current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Bomberloutre::__writeUserList(__os, &__ret[0], &__ret[0] + __ret.size());
    }
    __os->writePendingObjects();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::GamesManager::___createGame(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string name;
    ::Bomberloutre::GameWaitRoomPrx room;
    __is->read(name);
    ::Bomberloutre::__read(__is, room);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Bomberloutre::GamePtr __ret = createGame(name, room, __current);
    __os->write(::Ice::ObjectPtr(::IceInternal::upCast(__ret.get())));
    __os->writePendingObjects();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::GamesManager::___joinGame(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string name;
    ::Bomberloutre::GameWaitRoomPrx room;
    ::Bomberloutre::MapObserverPrx mo;
    __is->read(name);
    ::Bomberloutre::__read(__is, room);
    ::Bomberloutre::__read(__is, mo);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = joinGame(name, room, mo, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::GamesManager::___removeGame(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string name;
    __is->read(name);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = removeGame(name, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

static ::std::string __Bomberloutre__GamesManager_all[] =
{
    "createGame",
    "getGameList",
    "getUserList",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "joinGame",
    "removeGame"
};

::Ice::DispatchStatus
Bomberloutre::GamesManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__GamesManager_all, __Bomberloutre__GamesManager_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__GamesManager_all)
    {
        case 0:
        {
            return ___createGame(in, current);
        }
        case 1:
        {
            return ___getGameList(in, current);
        }
        case 2:
        {
            return ___getUserList(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___joinGame(in, current);
        }
        case 8:
        {
            return ___removeGame(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::GamesManager::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Bomberloutre::GamesManager::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::GamesManager::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::GamesManager was not generated with stream support";
    throw ex;
}

void
Bomberloutre::GamesManager::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::GamesManager was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__GamesManagerPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::GamesManagerPtr* p = static_cast< ::Bomberloutre::GamesManagerPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::GamesManagerPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::GamesManager::ice_staticId(), v->ice_id());
    }
}
