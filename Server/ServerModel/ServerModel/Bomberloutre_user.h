// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Bomberloutre_user.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __C__Users_Florent_Documents_Visual_Studio_2010_Projects_BomberLoutre_Server_ServerModel_ServerModel_Bomberloutre_user_h__
#define __C__Users_Florent_Documents_Visual_Studio_2010_Projects_BomberLoutre_Server_ServerModel_ServerModel_Bomberloutre_user_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Bomberloutre
{

class GamesManager;

class User;

class UserConnection;

}

}

namespace Bomberloutre
{

class GamesManager;
bool operator==(const GamesManager&, const GamesManager&);
bool operator<(const GamesManager&, const GamesManager&);

class User;
bool operator==(const User&, const User&);
bool operator<(const User&, const User&);

class UserConnection;
bool operator==(const UserConnection&, const UserConnection&);
bool operator<(const UserConnection&, const UserConnection&);

}

namespace IceInternal
{

::Ice::Object* upCast(::Bomberloutre::GamesManager*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::GamesManager*);

::Ice::Object* upCast(::Bomberloutre::User*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::User*);

::Ice::Object* upCast(::Bomberloutre::UserConnection*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::UserConnection*);

}

namespace Bomberloutre
{

typedef ::IceInternal::Handle< ::Bomberloutre::GamesManager> GamesManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::GamesManager> GamesManagerPrx;

void __read(::IceInternal::BasicStream*, GamesManagerPrx&);
void __patch__GamesManagerPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Bomberloutre::User> UserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::User> UserPrx;

void __read(::IceInternal::BasicStream*, UserPrx&);
void __patch__UserPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Bomberloutre::UserConnection> UserConnectionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::UserConnection> UserConnectionPrx;

void __read(::IceInternal::BasicStream*, UserConnectionPrx&);
void __patch__UserConnectionPtr(void*, ::Ice::ObjectPtr&);

}

namespace Bomberloutre
{

class UserException : public ::Ice::UserException
{
public:

    UserException() {}
    explicit UserException(const ::std::string&);
    virtual ~UserException() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    ::std::string reason;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

static UserException __UserException_init;

class BadLoginException : public ::Bomberloutre::UserException
{
public:

    BadLoginException() {}
    explicit BadLoginException(const ::std::string&);
    virtual ~BadLoginException() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

class BadPasswordException : public ::Bomberloutre::UserException
{
public:

    BadPasswordException() {}
    explicit BadPasswordException(const ::std::string&);
    virtual ~BadPasswordException() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

class UserAlreadyExistsException : public ::Bomberloutre::UserException
{
public:

    UserAlreadyExistsException() {}
    explicit UserAlreadyExistsException(const ::std::string&);
    virtual ~UserAlreadyExistsException() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

typedef ::std::vector< ::Bomberloutre::UserPtr> UserList;
void __writeUserList(::IceInternal::BasicStream*, const ::Bomberloutre::UserPtr*, const ::Bomberloutre::UserPtr*);
void __readUserList(::IceInternal::BasicStream*, UserList&);

}

namespace Bomberloutre
{

class AMD_UserConnection_connect : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Bomberloutre::UserPtr&) = 0;
};

typedef ::IceUtil::Handle< ::Bomberloutre::AMD_UserConnection_connect> AMD_UserConnection_connectPtr;

class AMD_UserConnection_createUser : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Bomberloutre::UserPtr&) = 0;
};

typedef ::IceUtil::Handle< ::Bomberloutre::AMD_UserConnection_createUser> AMD_UserConnection_createUserPtr;

}

namespace IceAsync
{

namespace Bomberloutre
{

class AMD_UserConnection_connect : public ::Bomberloutre::AMD_UserConnection_connect, public ::IceInternal::IncomingAsync
{
public:

    AMD_UserConnection_connect(::IceInternal::Incoming&);

    virtual void ice_response(const ::Bomberloutre::UserPtr&);
    virtual void ice_exception(const ::std::exception&);
#if defined(__BCPLUSPLUS__)
    // COMPILERFIX: Avoid compiler warnings with C++Builder 2010
    virtual void ice_exception()
    {
        ::IceInternal::IncomingAsync::ice_exception();
    }
#endif
};

class AMD_UserConnection_createUser : public ::Bomberloutre::AMD_UserConnection_createUser, public ::IceInternal::IncomingAsync
{
public:

    AMD_UserConnection_createUser(::IceInternal::Incoming&);

    virtual void ice_response(const ::Bomberloutre::UserPtr&);
    virtual void ice_exception(const ::std::exception&);
#if defined(__BCPLUSPLUS__)
    // COMPILERFIX: Avoid compiler warnings with C++Builder 2010
    virtual void ice_exception()
    {
        ::IceInternal::IncomingAsync::ice_exception();
    }
#endif
};

}

}

namespace Bomberloutre
{

class Callback_UserConnection_connect_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserConnection_connect_Base> Callback_UserConnection_connectPtr;

class Callback_UserConnection_createUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserConnection_createUser_Base> Callback_UserConnection_createUserPtr;

class Callback_User_deleteUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_deleteUser_Base> Callback_User_deleteUserPtr;

class Callback_User_addWin_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_addWin_Base> Callback_User_addWinPtr;

class Callback_User_addDraw_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_addDraw_Base> Callback_User_addDrawPtr;

class Callback_User_addLoose_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_addLoose_Base> Callback_User_addLoosePtr;

class Callback_User_commit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_commit_Base> Callback_User_commitPtr;

}

namespace IceProxy
{

namespace Bomberloutre
{

class UserConnection : virtual public ::IceProxy::Ice::Object
{
public:

    ::Bomberloutre::UserPtr connect(const ::std::string& login, const ::std::string& password)
    {
        return connect(login, password, 0);
    }
    ::Bomberloutre::UserPtr connect(const ::std::string& login, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return connect(login, password, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_connect(const ::std::string& login, const ::std::string& password)
    {
        return begin_connect(login, password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_connect(const ::std::string& login, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return begin_connect(login, password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_connect(const ::std::string& login, const ::std::string& password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_connect(login, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_connect(const ::std::string& login, const ::std::string& password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_connect(login, password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_connect(const ::std::string& login, const ::std::string& password, const ::Bomberloutre::Callback_UserConnection_connectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_connect(login, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_connect(const ::std::string& login, const ::std::string& password, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_UserConnection_connectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_connect(login, password, &__ctx, __del, __cookie);
    }

    ::Bomberloutre::UserPtr end_connect(const ::Ice::AsyncResultPtr&);
    
private:

    ::Bomberloutre::UserPtr connect(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_connect(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Bomberloutre::UserPtr createUser(const ::std::string& login, const ::std::string& password)
    {
        return createUser(login, password, 0);
    }
    ::Bomberloutre::UserPtr createUser(const ::std::string& login, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return createUser(login, password, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& login, const ::std::string& password)
    {
        return begin_createUser(login, password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& login, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return begin_createUser(login, password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& login, const ::std::string& password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(login, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& login, const ::std::string& password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(login, password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& login, const ::std::string& password, const ::Bomberloutre::Callback_UserConnection_createUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(login, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& login, const ::std::string& password, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_UserConnection_createUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(login, password, &__ctx, __del, __cookie);
    }

    ::Bomberloutre::UserPtr end_createUser(const ::Ice::AsyncResultPtr&);
    
private:

    ::Bomberloutre::UserPtr createUser(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createUser(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<UserConnection> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserConnection> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserConnection*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<UserConnection*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class User : virtual public ::IceProxy::Bomberloutre::UserConnection
{
public:

    bool deleteUser()
    {
        return deleteUser(0);
    }
    bool deleteUser(const ::Ice::Context& __ctx)
    {
        return deleteUser(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_deleteUser()
    {
        return begin_deleteUser(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteUser(const ::Ice::Context& __ctx)
    {
        return begin_deleteUser(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteUser(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteUser(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteUser(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteUser(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteUser(const ::Bomberloutre::Callback_User_deleteUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteUser(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteUser(const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_User_deleteUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteUser(&__ctx, __del, __cookie);
    }

    bool end_deleteUser(const ::Ice::AsyncResultPtr&);
    
private:

    bool deleteUser(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteUser(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide)
    {
        addWin(nbKill, nbDeath, nbSuicide, 0);
    }
    void addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx)
    {
        addWin(nbKill, nbDeath, nbSuicide, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide)
    {
        return begin_addWin(nbKill, nbDeath, nbSuicide, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx)
    {
        return begin_addWin(nbKill, nbDeath, nbSuicide, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWin(nbKill, nbDeath, nbSuicide, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWin(nbKill, nbDeath, nbSuicide, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Bomberloutre::Callback_User_addWinPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWin(nbKill, nbDeath, nbSuicide, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_User_addWinPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWin(nbKill, nbDeath, nbSuicide, &__ctx, __del, __cookie);
    }

    void end_addWin(const ::Ice::AsyncResultPtr&);
    
private:

    void addWin(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWin(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide)
    {
        addDraw(nbKill, nbDeath, nbSuicide, 0);
    }
    void addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx)
    {
        addDraw(nbKill, nbDeath, nbSuicide, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide)
    {
        return begin_addDraw(nbKill, nbDeath, nbSuicide, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx)
    {
        return begin_addDraw(nbKill, nbDeath, nbSuicide, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDraw(nbKill, nbDeath, nbSuicide, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDraw(nbKill, nbDeath, nbSuicide, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Bomberloutre::Callback_User_addDrawPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDraw(nbKill, nbDeath, nbSuicide, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_User_addDrawPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDraw(nbKill, nbDeath, nbSuicide, &__ctx, __del, __cookie);
    }

    void end_addDraw(const ::Ice::AsyncResultPtr&);
    
private:

    void addDraw(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addDraw(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide)
    {
        addLoose(nbKill, nbDeath, nbSuicide, 0);
    }
    void addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx)
    {
        addLoose(nbKill, nbDeath, nbSuicide, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide)
    {
        return begin_addLoose(nbKill, nbDeath, nbSuicide, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx)
    {
        return begin_addLoose(nbKill, nbDeath, nbSuicide, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLoose(nbKill, nbDeath, nbSuicide, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLoose(nbKill, nbDeath, nbSuicide, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Bomberloutre::Callback_User_addLoosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLoose(nbKill, nbDeath, nbSuicide, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_User_addLoosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLoose(nbKill, nbDeath, nbSuicide, &__ctx, __del, __cookie);
    }

    void end_addLoose(const ::Ice::AsyncResultPtr&);
    
private:

    void addLoose(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addLoose(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool commit()
    {
        return commit(0);
    }
    bool commit(const ::Ice::Context& __ctx)
    {
        return commit(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_commit()
    {
        return begin_commit(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_commit(const ::Ice::Context& __ctx)
    {
        return begin_commit(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_commit(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_commit(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_commit(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_commit(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_commit(const ::Bomberloutre::Callback_User_commitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_commit(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_commit(const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_User_commitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_commit(&__ctx, __del, __cookie);
    }

    bool end_commit(const ::Ice::AsyncResultPtr&);
    
private:

    bool commit(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_commit(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<User> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<User> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<User*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Bomberloutre
{

class UserConnection : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Bomberloutre::UserPtr connect(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Bomberloutre::UserPtr createUser(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;
};

class User : virtual public ::IceDelegate::Bomberloutre::UserConnection
{
public:

    virtual bool deleteUser(const ::Ice::Context*) = 0;

    virtual void addWin(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual void addDraw(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual void addLoose(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual bool commit(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace Bomberloutre
{

class UserConnection : virtual public ::IceDelegate::Bomberloutre::UserConnection,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Bomberloutre::UserPtr connect(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Bomberloutre::UserPtr createUser(const ::std::string&, const ::std::string&, const ::Ice::Context*);
};

class User : virtual public ::IceDelegate::Bomberloutre::User,
             virtual public ::IceDelegateM::Bomberloutre::UserConnection
{
public:

    virtual bool deleteUser(const ::Ice::Context*);

    virtual void addWin(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual void addDraw(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual void addLoose(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual bool commit(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace Bomberloutre
{

class UserConnection : virtual public ::IceDelegate::Bomberloutre::UserConnection,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Bomberloutre::UserPtr connect(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Bomberloutre::UserPtr createUser(const ::std::string&, const ::std::string&, const ::Ice::Context*);
};

class User : virtual public ::IceDelegate::Bomberloutre::User,
             virtual public ::IceDelegateD::Bomberloutre::UserConnection
{
public:

    virtual bool deleteUser(const ::Ice::Context*);

    virtual void addWin(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual void addDraw(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual void addLoose(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual bool commit(const ::Ice::Context*);
};

}

}

namespace Bomberloutre
{

class UserConnection : virtual public ::Ice::Object
{
public:

    typedef UserConnectionPrx ProxyType;
    typedef UserConnectionPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void connect_async(const ::Bomberloutre::AMD_UserConnection_connectPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___connect(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createUser_async(const ::Bomberloutre::AMD_UserConnection_createUserPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const UserConnection& l, const UserConnection& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const UserConnection& l, const UserConnection& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class User : virtual public ::Bomberloutre::UserConnection
{
public:

    typedef UserPrx ProxyType;
    typedef UserPtr PointerType;
    
    User() {}
    User(const ::std::string&, const ::std::string&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::std::string&, const ::Bomberloutre::GamesManagerPrx&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual bool deleteUser(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWin(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWin(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addDraw(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addDraw(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addLoose(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addLoose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool commit(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___commit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    ::std::string login;

    ::std::string password;

    ::Ice::Int nbGame;

    ::Ice::Int nbWin;

    ::Ice::Int nbDraw;

    ::Ice::Int nbKill;

    ::Ice::Int nbDeath;

    ::Ice::Int nbSuicide;

    ::std::string gameTag;

    ::Bomberloutre::GamesManagerPrx mgr;
};

inline bool operator==(const User& l, const User& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const User& l, const User& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Bomberloutre
{

template<class T>
class CallbackNC_UserConnection_connect : public Callback_UserConnection_connect_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Bomberloutre::UserPtr&);

    CallbackNC_UserConnection_connect(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::UserConnectionPrx __proxy = ::Bomberloutre::UserConnectionPrx::uncheckedCast(__result->getProxy());
        ::Bomberloutre::UserPtr __ret;
        try
        {
            __ret = __proxy->end_connect(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserConnection_connectPtr
newCallback_UserConnection_connect(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Bomberloutre::UserPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserConnection_connect<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserConnection_connectPtr
newCallback_UserConnection_connect(T* instance, void (T::*cb)(const ::Bomberloutre::UserPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserConnection_connect<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserConnection_connect : public Callback_UserConnection_connect_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Bomberloutre::UserPtr&, const CT&);

    Callback_UserConnection_connect(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::UserConnectionPrx __proxy = ::Bomberloutre::UserConnectionPrx::uncheckedCast(__result->getProxy());
        ::Bomberloutre::UserPtr __ret;
        try
        {
            __ret = __proxy->end_connect(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserConnection_connectPtr
newCallback_UserConnection_connect(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Bomberloutre::UserPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserConnection_connect<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserConnection_connectPtr
newCallback_UserConnection_connect(T* instance, void (T::*cb)(const ::Bomberloutre::UserPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserConnection_connect<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserConnection_createUser : public Callback_UserConnection_createUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Bomberloutre::UserPtr&);

    CallbackNC_UserConnection_createUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::UserConnectionPrx __proxy = ::Bomberloutre::UserConnectionPrx::uncheckedCast(__result->getProxy());
        ::Bomberloutre::UserPtr __ret;
        try
        {
            __ret = __proxy->end_createUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserConnection_createUserPtr
newCallback_UserConnection_createUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Bomberloutre::UserPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserConnection_createUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserConnection_createUserPtr
newCallback_UserConnection_createUser(T* instance, void (T::*cb)(const ::Bomberloutre::UserPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserConnection_createUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserConnection_createUser : public Callback_UserConnection_createUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Bomberloutre::UserPtr&, const CT&);

    Callback_UserConnection_createUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::UserConnectionPrx __proxy = ::Bomberloutre::UserConnectionPrx::uncheckedCast(__result->getProxy());
        ::Bomberloutre::UserPtr __ret;
        try
        {
            __ret = __proxy->end_createUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserConnection_createUserPtr
newCallback_UserConnection_createUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Bomberloutre::UserPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserConnection_createUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserConnection_createUserPtr
newCallback_UserConnection_createUser(T* instance, void (T::*cb)(const ::Bomberloutre::UserPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserConnection_createUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_User_deleteUser : public Callback_User_deleteUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_User_deleteUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::UserPrx __proxy = ::Bomberloutre::UserPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_User_deleteUserPtr
newCallback_User_deleteUser(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_deleteUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_deleteUserPtr
newCallback_User_deleteUser(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_deleteUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_deleteUser : public Callback_User_deleteUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_User_deleteUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::UserPrx __proxy = ::Bomberloutre::UserPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_User_deleteUserPtr
newCallback_User_deleteUser(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_deleteUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_deleteUserPtr
newCallback_User_deleteUser(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_deleteUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_User_addWin : public Callback_User_addWin_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_addWin(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_User_addWinPtr
newCallback_User_addWin(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addWin<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_addWinPtr
newCallback_User_addWin(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addWin<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_User_addWinPtr
newCallback_User_addWin(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addWin<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_addWinPtr
newCallback_User_addWin(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addWin<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_addWin : public Callback_User_addWin_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_addWin(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_User_addWinPtr
newCallback_User_addWin(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addWin<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_addWinPtr
newCallback_User_addWin(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addWin<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_User_addWinPtr
newCallback_User_addWin(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addWin<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_addWinPtr
newCallback_User_addWin(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addWin<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_User_addDraw : public Callback_User_addDraw_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_addDraw(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_User_addDrawPtr
newCallback_User_addDraw(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addDraw<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_addDrawPtr
newCallback_User_addDraw(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addDraw<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_User_addDrawPtr
newCallback_User_addDraw(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addDraw<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_addDrawPtr
newCallback_User_addDraw(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addDraw<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_addDraw : public Callback_User_addDraw_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_addDraw(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_User_addDrawPtr
newCallback_User_addDraw(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addDraw<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_addDrawPtr
newCallback_User_addDraw(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addDraw<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_User_addDrawPtr
newCallback_User_addDraw(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addDraw<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_addDrawPtr
newCallback_User_addDraw(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addDraw<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_User_addLoose : public Callback_User_addLoose_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_addLoose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_User_addLoosePtr
newCallback_User_addLoose(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addLoose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_addLoosePtr
newCallback_User_addLoose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addLoose<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_User_addLoosePtr
newCallback_User_addLoose(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addLoose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_addLoosePtr
newCallback_User_addLoose(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_addLoose<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_addLoose : public Callback_User_addLoose_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_addLoose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_User_addLoosePtr
newCallback_User_addLoose(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addLoose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_addLoosePtr
newCallback_User_addLoose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addLoose<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_User_addLoosePtr
newCallback_User_addLoose(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addLoose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_addLoosePtr
newCallback_User_addLoose(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_addLoose<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_User_commit : public Callback_User_commit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_User_commit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::UserPrx __proxy = ::Bomberloutre::UserPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_commit(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_User_commitPtr
newCallback_User_commit(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_commit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_commitPtr
newCallback_User_commit(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_commit<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_commit : public Callback_User_commit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_User_commit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::UserPrx __proxy = ::Bomberloutre::UserPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_commit(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_User_commitPtr
newCallback_User_commit(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_commit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_commitPtr
newCallback_User_commit(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_commit<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
