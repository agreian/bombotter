// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Bomberloutre_player.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Bomberloutre_player.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __Bomberloutre__Player__kickBomb_name = "kickBomb";

static const ::std::string __Bomberloutre__Player__addBonus_name = "addBonus";

static const ::std::string __Bomberloutre__Player__die_name = "die";

static const ::std::string __Bomberloutre__Player__dropBonuses_name = "dropBonuses";

static const ::std::string __Bomberloutre__Player__win_name = "win";

static const ::std::string __Bomberloutre__Player__loose_name = "loose";

static const ::std::string __Bomberloutre__Player__draw_name = "draw";

::Ice::Object* IceInternal::upCast(::Bomberloutre::Player* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::Player* p) { return p; }

::Ice::Object* IceInternal::upCast(::Bomberloutre::Bot* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::Bot* p) { return p; }

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::PlayerPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::Player;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::BotPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::Bot;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__writePlayerList(::IceInternal::BasicStream* __os, const ::Bomberloutre::PlayerPtr* begin, const ::Bomberloutre::PlayerPtr* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(begin[i].get())));
    }
}

void
Bomberloutre::__readPlayerList(::IceInternal::BasicStream* __is, ::Bomberloutre::PlayerList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(4, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        __is->read(::Bomberloutre::__patch__PlayerPtr, &v[i]);
    }
}

void
IceProxy::Bomberloutre::Player::kickBomb(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Player* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Player*>(__delBase.get());
            __del->kickBomb(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Player::begin_kickBomb(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Player__kickBomb_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Player__kickBomb_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Player::end_kickBomb(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Player__kickBomb_name);
}

void
IceProxy::Bomberloutre::Player::addBonus(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Player* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Player*>(__delBase.get());
            __del->addBonus(b, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Player::begin_addBonus(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Player__addBonus_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Player__addBonus_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(b.get())));
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Player::end_addBonus(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Player__addBonus_name);
}

void
IceProxy::Bomberloutre::Player::die(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Player* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Player*>(__delBase.get());
            __del->die(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Player::begin_die(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Player__die_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Player__die_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Player::end_die(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Player__die_name);
}

void
IceProxy::Bomberloutre::Player::dropBonuses(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Player* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Player*>(__delBase.get());
            __del->dropBonuses(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Player::begin_dropBonuses(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Player__dropBonuses_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Player__dropBonuses_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Player::end_dropBonuses(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Player__dropBonuses_name);
}

void
IceProxy::Bomberloutre::Player::win(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Player* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Player*>(__delBase.get());
            __del->win(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Player::begin_win(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Player__win_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Player__win_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Player::end_win(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Player__win_name);
}

void
IceProxy::Bomberloutre::Player::loose(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Player* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Player*>(__delBase.get());
            __del->loose(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Player::begin_loose(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Player__loose_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Player__loose_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Player::end_loose(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Player__loose_name);
}

void
IceProxy::Bomberloutre::Player::draw(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Player* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Player*>(__delBase.get());
            __del->draw(__ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Player::begin_draw(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Player__draw_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Player__draw_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Player::end_draw(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Player__draw_name);
}

const ::std::string&
IceProxy::Bomberloutre::Player::ice_staticId()
{
    return ::Bomberloutre::Player::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::Player::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::Player);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::Player::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::Player);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::Player::__newInstance() const
{
    return new Player;
}

const ::std::string&
IceProxy::Bomberloutre::Bot::ice_staticId()
{
    return ::Bomberloutre::Bot::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::Bot::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::Bot);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::Bot::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::Bot);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::Bot::__newInstance() const
{
    return new Bot;
}

void
IceDelegateM::Bomberloutre::Player::kickBomb(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Player__kickBomb_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::Player::addBonus(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Player__addBonus_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(b.get())));
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::Player::die(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Player__die_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::Player::dropBonuses(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Player__dropBonuses_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::Player::win(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Player__win_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::Player::loose(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Player__loose_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::Player::draw(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Player__draw_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::Bomberloutre::Player::kickBomb(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Player* servant = dynamic_cast< ::Bomberloutre::Player*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->kickBomb(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Player__kickBomb_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::Player::addBonus(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Bomberloutre::BonusPtr& b, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_b(b)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Player* servant = dynamic_cast< ::Bomberloutre::Player*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->addBonus(_m_b, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Bomberloutre::BonusPtr& _m_b;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Player__addBonus_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(b, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::Player::die(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Player* servant = dynamic_cast< ::Bomberloutre::Player*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->die(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Player__die_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::Player::dropBonuses(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Player* servant = dynamic_cast< ::Bomberloutre::Player*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->dropBonuses(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Player__dropBonuses_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::Player::win(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Player* servant = dynamic_cast< ::Bomberloutre::Player*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->win(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Player__win_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::Player::loose(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Player* servant = dynamic_cast< ::Bomberloutre::Player*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->loose(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Player__loose_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::Player::draw(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Player* servant = dynamic_cast< ::Bomberloutre::Player*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->draw(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Player__draw_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

Bomberloutre::Player::Player(::Ice::Int __ice_posX, ::Ice::Int __ice_posY, ::Ice::Int __ice_width, ::Ice::Int __ice_height, ::Ice::Int __ice_nbKill, ::Ice::Int __ice_nbDeath, ::Ice::Int __ice_nbSuicide, ::Ice::Int __ice_speed, ::Ice::Int __ice_nbBomb, ::Ice::Int __ice_flamePower, bool __ice_kicker, bool __ice_invincible, bool __ice_invisible, ::Ice::Int __ice_maxSpeed, ::Ice::Int __ice_maxBomb, ::Ice::Int __ice_maxPower) :
    posX(__ice_posX),
    posY(__ice_posY),
    width(__ice_width),
    height(__ice_height),
    nbKill(__ice_nbKill),
    nbDeath(__ice_nbDeath),
    nbSuicide(__ice_nbSuicide),
    speed(__ice_speed),
    nbBomb(__ice_nbBomb),
    flamePower(__ice_flamePower),
    kicker(__ice_kicker),
    invincible(__ice_invincible),
    invisible(__ice_invisible),
    maxSpeed(__ice_maxSpeed),
    maxBomb(__ice_maxBomb),
    maxPower(__ice_maxPower)
{
}

::Ice::ObjectPtr
Bomberloutre::Player::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__Player_ids[2] =
{
    "::Bomberloutre::Player",
    "::Ice::Object"
};

bool
Bomberloutre::Player::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__Player_ids, __Bomberloutre__Player_ids + 2, _s);
}

::std::vector< ::std::string>
Bomberloutre::Player::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__Player_ids[0], &__Bomberloutre__Player_ids[2]);
}

const ::std::string&
Bomberloutre::Player::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__Player_ids[0];
}

const ::std::string&
Bomberloutre::Player::ice_staticId()
{
    return __Bomberloutre__Player_ids[0];
}

::Ice::DispatchStatus
Bomberloutre::Player::___kickBomb(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    kickBomb(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Player::___addBonus(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Bomberloutre::BonusPtr b;
    __is->read(::Bomberloutre::__patch__BonusPtr, &b);
    __is->readPendingObjects();
    __is->endReadEncaps();
    addBonus(b, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Player::___die(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    die(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Player::___dropBonuses(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    dropBonuses(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Player::___win(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    win(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Player::___loose(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    loose(__current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Player::___draw(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    draw(__current);
    return ::Ice::DispatchOK;
}

static ::std::string __Bomberloutre__Player_all[] =
{
    "addBonus",
    "die",
    "draw",
    "dropBonuses",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "kickBomb",
    "loose",
    "win"
};

::Ice::DispatchStatus
Bomberloutre::Player::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__Player_all, __Bomberloutre__Player_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__Player_all)
    {
        case 0:
        {
            return ___addBonus(in, current);
        }
        case 1:
        {
            return ___die(in, current);
        }
        case 2:
        {
            return ___draw(in, current);
        }
        case 3:
        {
            return ___dropBonuses(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
        case 8:
        {
            return ___kickBomb(in, current);
        }
        case 9:
        {
            return ___loose(in, current);
        }
        case 10:
        {
            return ___win(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::Player::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->write(posX);
    __os->write(posY);
    __os->write(width);
    __os->write(height);
    __os->write(nbKill);
    __os->write(nbDeath);
    __os->write(nbSuicide);
    __os->write(speed);
    __os->write(nbBomb);
    __os->write(flamePower);
    __os->write(kicker);
    __os->write(invincible);
    __os->write(invisible);
    __os->write(maxSpeed);
    __os->write(maxBomb);
    __os->write(maxPower);
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Bomberloutre::Player::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->read(posX);
    __is->read(posY);
    __is->read(width);
    __is->read(height);
    __is->read(nbKill);
    __is->read(nbDeath);
    __is->read(nbSuicide);
    __is->read(speed);
    __is->read(nbBomb);
    __is->read(flamePower);
    __is->read(kicker);
    __is->read(invincible);
    __is->read(invisible);
    __is->read(maxSpeed);
    __is->read(maxBomb);
    __is->read(maxPower);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::Player::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::Player was not generated with stream support";
    throw ex;
}

void
Bomberloutre::Player::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::Player was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__PlayerPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::PlayerPtr* p = static_cast< ::Bomberloutre::PlayerPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::PlayerPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::Player::ice_staticId(), v->ice_id());
    }
}

Bomberloutre::Bot::Bot(::Ice::Int __ice_posX, ::Ice::Int __ice_posY, ::Ice::Int __ice_width, ::Ice::Int __ice_height, ::Ice::Int __ice_nbKill, ::Ice::Int __ice_nbDeath, ::Ice::Int __ice_nbSuicide, ::Ice::Int __ice_speed, ::Ice::Int __ice_nbBomb, ::Ice::Int __ice_flamePower, bool __ice_kicker, bool __ice_invincible, bool __ice_invisible, ::Ice::Int __ice_maxSpeed, ::Ice::Int __ice_maxBomb, ::Ice::Int __ice_maxPower) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Player(__ice_posX, __ice_posY, __ice_width, __ice_height, __ice_nbKill, __ice_nbDeath, __ice_nbSuicide, __ice_speed, __ice_nbBomb, __ice_flamePower, __ice_kicker, __ice_invincible, __ice_invisible, __ice_maxSpeed, __ice_maxBomb, __ice_maxPower)
#else
    ::Bomberloutre::Player(__ice_posX, __ice_posY, __ice_width, __ice_height, __ice_nbKill, __ice_nbDeath, __ice_nbSuicide, __ice_speed, __ice_nbBomb, __ice_flamePower, __ice_kicker, __ice_invincible, __ice_invisible, __ice_maxSpeed, __ice_maxBomb, __ice_maxPower)
#endif

{
}

::Ice::ObjectPtr
Bomberloutre::Bot::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__Bot_ids[3] =
{
    "::Bomberloutre::Bot",
    "::Bomberloutre::Player",
    "::Ice::Object"
};

bool
Bomberloutre::Bot::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__Bot_ids, __Bomberloutre__Bot_ids + 3, _s);
}

::std::vector< ::std::string>
Bomberloutre::Bot::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__Bot_ids[0], &__Bomberloutre__Bot_ids[3]);
}

const ::std::string&
Bomberloutre::Bot::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__Bot_ids[0];
}

const ::std::string&
Bomberloutre::Bot::ice_staticId()
{
    return __Bomberloutre__Bot_ids[0];
}

static ::std::string __Bomberloutre__Bot_all[] =
{
    "addBonus",
    "die",
    "draw",
    "dropBonuses",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "kickBomb",
    "loose",
    "win"
};

::Ice::DispatchStatus
Bomberloutre::Bot::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__Bot_all, __Bomberloutre__Bot_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__Bot_all)
    {
        case 0:
        {
            return ___addBonus(in, current);
        }
        case 1:
        {
            return ___die(in, current);
        }
        case 2:
        {
            return ___draw(in, current);
        }
        case 3:
        {
            return ___dropBonuses(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
        case 8:
        {
            return ___kickBomb(in, current);
        }
        case 9:
        {
            return ___loose(in, current);
        }
        case 10:
        {
            return ___win(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::Bot::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Player::__write(__os);
#else
    ::Bomberloutre::Player::__write(__os);
#endif
}

void
Bomberloutre::Bot::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Player::__read(__is, true);
#else
    ::Bomberloutre::Player::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::Bot::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::Bot was not generated with stream support";
    throw ex;
}

void
Bomberloutre::Bot::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::Bot was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__BotPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::BotPtr* p = static_cast< ::Bomberloutre::BotPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::BotPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::Bot::ice_staticId(), v->ice_id());
    }
}
