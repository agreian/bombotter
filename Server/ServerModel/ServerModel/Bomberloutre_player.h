// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Bomberloutre_player.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __C__Users_Florent_Documents_Visual_Studio_2010_Projects_BomberLoutre_Server_ServerModel_ServerModel_Bomberloutre_player_h__
#define __C__Users_Florent_Documents_Visual_Studio_2010_Projects_BomberLoutre_Server_ServerModel_ServerModel_Bomberloutre_player_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Bomberloutre_object.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Bomberloutre
{

class Player;

class Bot;

}

}

namespace Bomberloutre
{

class Player;
bool operator==(const Player&, const Player&);
bool operator<(const Player&, const Player&);

class Bot;
bool operator==(const Bot&, const Bot&);
bool operator<(const Bot&, const Bot&);

}

namespace IceInternal
{

::Ice::Object* upCast(::Bomberloutre::Player*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::Player*);

::Ice::Object* upCast(::Bomberloutre::Bot*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::Bot*);

}

namespace Bomberloutre
{

typedef ::IceInternal::Handle< ::Bomberloutre::Player> PlayerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::Player> PlayerPrx;

void __read(::IceInternal::BasicStream*, PlayerPrx&);
void __patch__PlayerPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Bomberloutre::Bot> BotPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::Bot> BotPrx;

void __read(::IceInternal::BasicStream*, BotPrx&);
void __patch__BotPtr(void*, ::Ice::ObjectPtr&);

}

namespace Bomberloutre
{

typedef ::std::vector< ::Bomberloutre::PlayerPtr> PlayerList;
void __writePlayerList(::IceInternal::BasicStream*, const ::Bomberloutre::PlayerPtr*, const ::Bomberloutre::PlayerPtr*);
void __readPlayerList(::IceInternal::BasicStream*, PlayerList&);

}

namespace Bomberloutre
{

class Callback_Player_kickBomb_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Player_kickBomb_Base> Callback_Player_kickBombPtr;

class Callback_Player_addBonus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Player_addBonus_Base> Callback_Player_addBonusPtr;

class Callback_Player_die_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Player_die_Base> Callback_Player_diePtr;

class Callback_Player_dropBonuses_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Player_dropBonuses_Base> Callback_Player_dropBonusesPtr;

class Callback_Player_win_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Player_win_Base> Callback_Player_winPtr;

class Callback_Player_loose_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Player_loose_Base> Callback_Player_loosePtr;

class Callback_Player_draw_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Player_draw_Base> Callback_Player_drawPtr;

}

namespace IceProxy
{

namespace Bomberloutre
{

class Player : virtual public ::IceProxy::Ice::Object
{
public:

    void kickBomb()
    {
        kickBomb(0);
    }
    void kickBomb(const ::Ice::Context& __ctx)
    {
        kickBomb(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_kickBomb()
    {
        return begin_kickBomb(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_kickBomb(const ::Ice::Context& __ctx)
    {
        return begin_kickBomb(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_kickBomb(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_kickBomb(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_kickBomb(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_kickBomb(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_kickBomb(const ::Bomberloutre::Callback_Player_kickBombPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_kickBomb(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_kickBomb(const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_Player_kickBombPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_kickBomb(&__ctx, __del, __cookie);
    }

    void end_kickBomb(const ::Ice::AsyncResultPtr&);
    
private:

    void kickBomb(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_kickBomb(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addBonus(const ::Bomberloutre::BonusPtr& b)
    {
        addBonus(b, 0);
    }
    void addBonus(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context& __ctx)
    {
        addBonus(b, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addBonus(const ::Bomberloutre::BonusPtr& b)
    {
        return begin_addBonus(b, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addBonus(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context& __ctx)
    {
        return begin_addBonus(b, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addBonus(const ::Bomberloutre::BonusPtr& b, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addBonus(b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addBonus(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addBonus(b, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addBonus(const ::Bomberloutre::BonusPtr& b, const ::Bomberloutre::Callback_Player_addBonusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addBonus(b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addBonus(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_Player_addBonusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addBonus(b, &__ctx, __del, __cookie);
    }

    void end_addBonus(const ::Ice::AsyncResultPtr&);
    
private:

    void addBonus(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addBonus(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void die()
    {
        die(0);
    }
    void die(const ::Ice::Context& __ctx)
    {
        die(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_die()
    {
        return begin_die(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_die(const ::Ice::Context& __ctx)
    {
        return begin_die(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_die(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_die(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_die(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_die(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_die(const ::Bomberloutre::Callback_Player_diePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_die(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_die(const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_Player_diePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_die(&__ctx, __del, __cookie);
    }

    void end_die(const ::Ice::AsyncResultPtr&);
    
private:

    void die(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_die(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void dropBonuses()
    {
        dropBonuses(0);
    }
    void dropBonuses(const ::Ice::Context& __ctx)
    {
        dropBonuses(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_dropBonuses()
    {
        return begin_dropBonuses(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_dropBonuses(const ::Ice::Context& __ctx)
    {
        return begin_dropBonuses(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_dropBonuses(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_dropBonuses(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_dropBonuses(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_dropBonuses(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_dropBonuses(const ::Bomberloutre::Callback_Player_dropBonusesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_dropBonuses(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_dropBonuses(const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_Player_dropBonusesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_dropBonuses(&__ctx, __del, __cookie);
    }

    void end_dropBonuses(const ::Ice::AsyncResultPtr&);
    
private:

    void dropBonuses(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_dropBonuses(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void win()
    {
        win(0);
    }
    void win(const ::Ice::Context& __ctx)
    {
        win(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_win()
    {
        return begin_win(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_win(const ::Ice::Context& __ctx)
    {
        return begin_win(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_win(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_win(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_win(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_win(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_win(const ::Bomberloutre::Callback_Player_winPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_win(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_win(const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_Player_winPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_win(&__ctx, __del, __cookie);
    }

    void end_win(const ::Ice::AsyncResultPtr&);
    
private:

    void win(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_win(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void loose()
    {
        loose(0);
    }
    void loose(const ::Ice::Context& __ctx)
    {
        loose(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_loose()
    {
        return begin_loose(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loose(const ::Ice::Context& __ctx)
    {
        return begin_loose(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loose(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loose(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loose(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loose(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loose(const ::Bomberloutre::Callback_Player_loosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loose(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loose(const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_Player_loosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loose(&__ctx, __del, __cookie);
    }

    void end_loose(const ::Ice::AsyncResultPtr&);
    
private:

    void loose(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loose(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void draw()
    {
        draw(0);
    }
    void draw(const ::Ice::Context& __ctx)
    {
        draw(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_draw()
    {
        return begin_draw(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_draw(const ::Ice::Context& __ctx)
    {
        return begin_draw(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_draw(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_draw(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_draw(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_draw(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_draw(const ::Bomberloutre::Callback_Player_drawPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_draw(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_draw(const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_Player_drawPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_draw(&__ctx, __del, __cookie);
    }

    void end_draw(const ::Ice::AsyncResultPtr&);
    
private:

    void draw(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_draw(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Player> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Player> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Player*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Bot : virtual public ::IceProxy::Bomberloutre::Player
{
public:
    
    ::IceInternal::ProxyHandle<Bot> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Bot> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Bot*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Bot*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Bomberloutre
{

class Player : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void kickBomb(const ::Ice::Context*) = 0;

    virtual void addBonus(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*) = 0;

    virtual void die(const ::Ice::Context*) = 0;

    virtual void dropBonuses(const ::Ice::Context*) = 0;

    virtual void win(const ::Ice::Context*) = 0;

    virtual void loose(const ::Ice::Context*) = 0;

    virtual void draw(const ::Ice::Context*) = 0;
};

class Bot : virtual public ::IceDelegate::Bomberloutre::Player
{
public:
};

}

}

namespace IceDelegateM
{

namespace Bomberloutre
{

class Player : virtual public ::IceDelegate::Bomberloutre::Player,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void kickBomb(const ::Ice::Context*);

    virtual void addBonus(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*);

    virtual void die(const ::Ice::Context*);

    virtual void dropBonuses(const ::Ice::Context*);

    virtual void win(const ::Ice::Context*);

    virtual void loose(const ::Ice::Context*);

    virtual void draw(const ::Ice::Context*);
};

class Bot : virtual public ::IceDelegate::Bomberloutre::Bot,
            virtual public ::IceDelegateM::Bomberloutre::Player
{
public:
};

}

}

namespace IceDelegateD
{

namespace Bomberloutre
{

class Player : virtual public ::IceDelegate::Bomberloutre::Player,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void kickBomb(const ::Ice::Context*);

    virtual void addBonus(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*);

    virtual void die(const ::Ice::Context*);

    virtual void dropBonuses(const ::Ice::Context*);

    virtual void win(const ::Ice::Context*);

    virtual void loose(const ::Ice::Context*);

    virtual void draw(const ::Ice::Context*);
};

class Bot : virtual public ::IceDelegate::Bomberloutre::Bot,
            virtual public ::IceDelegateD::Bomberloutre::Player
{
public:
};

}

}

namespace Bomberloutre
{

class Player : virtual public ::Ice::Object
{
public:

    typedef PlayerPrx ProxyType;
    typedef PlayerPtr PointerType;
    
    Player() {}
    Player(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, bool, bool, bool, ::Ice::Int, ::Ice::Int, ::Ice::Int);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void kickBomb(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___kickBomb(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addBonus(const ::Bomberloutre::BonusPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addBonus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void die(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___die(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void dropBonuses(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___dropBonuses(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void win(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___win(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loose(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void draw(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___draw(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    ::Ice::Int posX;

    ::Ice::Int posY;

    ::Ice::Int width;

    ::Ice::Int height;

    ::Ice::Int nbKill;

    ::Ice::Int nbDeath;

    ::Ice::Int nbSuicide;

    ::Ice::Int speed;

    ::Ice::Int nbBomb;

    ::Ice::Int flamePower;

    bool kicker;

    bool invincible;

    bool invisible;

    ::Ice::Int maxSpeed;

    ::Ice::Int maxBomb;

    ::Ice::Int maxPower;
};

inline bool operator==(const Player& l, const Player& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Player& l, const Player& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Bot : public ::Bomberloutre::Player
{
public:

    typedef BotPrx ProxyType;
    typedef BotPtr PointerType;
    
    Bot() {}
    Bot(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, bool, bool, bool, ::Ice::Int, ::Ice::Int, ::Ice::Int);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const Bot& l, const Bot& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Bot& l, const Bot& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Bomberloutre
{

template<class T>
class CallbackNC_Player_kickBomb : public Callback_Player_kickBomb_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Player_kickBomb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Player_kickBombPtr
newCallback_Player_kickBomb(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_kickBomb<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_kickBombPtr
newCallback_Player_kickBomb(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_kickBomb<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Player_kickBombPtr
newCallback_Player_kickBomb(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_kickBomb<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_kickBombPtr
newCallback_Player_kickBomb(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_kickBomb<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Player_kickBomb : public Callback_Player_kickBomb_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Player_kickBomb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Player_kickBombPtr
newCallback_Player_kickBomb(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_kickBomb<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_kickBombPtr
newCallback_Player_kickBomb(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_kickBomb<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Player_kickBombPtr
newCallback_Player_kickBomb(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_kickBomb<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_kickBombPtr
newCallback_Player_kickBomb(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_kickBomb<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Player_addBonus : public Callback_Player_addBonus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Player_addBonus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Player_addBonusPtr
newCallback_Player_addBonus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_addBonus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_addBonusPtr
newCallback_Player_addBonus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_addBonus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Player_addBonusPtr
newCallback_Player_addBonus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_addBonus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_addBonusPtr
newCallback_Player_addBonus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_addBonus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Player_addBonus : public Callback_Player_addBonus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Player_addBonus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Player_addBonusPtr
newCallback_Player_addBonus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_addBonus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_addBonusPtr
newCallback_Player_addBonus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_addBonus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Player_addBonusPtr
newCallback_Player_addBonus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_addBonus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_addBonusPtr
newCallback_Player_addBonus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_addBonus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Player_die : public Callback_Player_die_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Player_die(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Player_diePtr
newCallback_Player_die(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_die<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_diePtr
newCallback_Player_die(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_die<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Player_diePtr
newCallback_Player_die(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_die<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_diePtr
newCallback_Player_die(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_die<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Player_die : public Callback_Player_die_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Player_die(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Player_diePtr
newCallback_Player_die(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_die<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_diePtr
newCallback_Player_die(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_die<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Player_diePtr
newCallback_Player_die(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_die<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_diePtr
newCallback_Player_die(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_die<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Player_dropBonuses : public Callback_Player_dropBonuses_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Player_dropBonuses(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Player_dropBonusesPtr
newCallback_Player_dropBonuses(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_dropBonuses<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_dropBonusesPtr
newCallback_Player_dropBonuses(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_dropBonuses<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Player_dropBonusesPtr
newCallback_Player_dropBonuses(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_dropBonuses<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_dropBonusesPtr
newCallback_Player_dropBonuses(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_dropBonuses<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Player_dropBonuses : public Callback_Player_dropBonuses_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Player_dropBonuses(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Player_dropBonusesPtr
newCallback_Player_dropBonuses(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_dropBonuses<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_dropBonusesPtr
newCallback_Player_dropBonuses(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_dropBonuses<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Player_dropBonusesPtr
newCallback_Player_dropBonuses(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_dropBonuses<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_dropBonusesPtr
newCallback_Player_dropBonuses(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_dropBonuses<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Player_win : public Callback_Player_win_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Player_win(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Player_winPtr
newCallback_Player_win(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_win<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_winPtr
newCallback_Player_win(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_win<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Player_winPtr
newCallback_Player_win(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_win<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_winPtr
newCallback_Player_win(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_win<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Player_win : public Callback_Player_win_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Player_win(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Player_winPtr
newCallback_Player_win(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_win<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_winPtr
newCallback_Player_win(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_win<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Player_winPtr
newCallback_Player_win(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_win<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_winPtr
newCallback_Player_win(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_win<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Player_loose : public Callback_Player_loose_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Player_loose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Player_loosePtr
newCallback_Player_loose(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_loose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_loosePtr
newCallback_Player_loose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_loose<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Player_loosePtr
newCallback_Player_loose(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_loose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_loosePtr
newCallback_Player_loose(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_loose<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Player_loose : public Callback_Player_loose_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Player_loose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Player_loosePtr
newCallback_Player_loose(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_loose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_loosePtr
newCallback_Player_loose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_loose<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Player_loosePtr
newCallback_Player_loose(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_loose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_loosePtr
newCallback_Player_loose(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_loose<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Player_draw : public Callback_Player_draw_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Player_draw(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Player_drawPtr
newCallback_Player_draw(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_draw<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_drawPtr
newCallback_Player_draw(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_draw<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Player_drawPtr
newCallback_Player_draw(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_draw<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_drawPtr
newCallback_Player_draw(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_draw<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Player_draw : public Callback_Player_draw_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Player_draw(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Player_drawPtr
newCallback_Player_draw(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_draw<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_drawPtr
newCallback_Player_draw(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_draw<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Player_drawPtr
newCallback_Player_draw(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_draw<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_drawPtr
newCallback_Player_draw(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_draw<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
