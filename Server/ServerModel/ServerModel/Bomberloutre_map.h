// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Bomberloutre_map.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __C__Users_Florent_Documents_Visual_Studio_2010_Projects_BomberLoutre_Server_ServerModel_ServerModel_Bomberloutre_map_h__
#define __C__Users_Florent_Documents_Visual_Studio_2010_Projects_BomberLoutre_Server_ServerModel_ServerModel_Bomberloutre_map_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Bomberloutre_player.h>
#include <Bomberloutre_object.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Bomberloutre
{

class Map;

class MapClassic;

class MapSurvival;

class MapFogOfWar;

class MapObserver;

}

}

namespace Bomberloutre
{

class Map;
bool operator==(const Map&, const Map&);
bool operator<(const Map&, const Map&);

class MapClassic;
bool operator==(const MapClassic&, const MapClassic&);
bool operator<(const MapClassic&, const MapClassic&);

class MapSurvival;
bool operator==(const MapSurvival&, const MapSurvival&);
bool operator<(const MapSurvival&, const MapSurvival&);

class MapFogOfWar;
bool operator==(const MapFogOfWar&, const MapFogOfWar&);
bool operator<(const MapFogOfWar&, const MapFogOfWar&);

class MapObserver;
bool operator==(const MapObserver&, const MapObserver&);
bool operator<(const MapObserver&, const MapObserver&);

}

namespace IceInternal
{

::Ice::Object* upCast(::Bomberloutre::Map*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::Map*);

::Ice::Object* upCast(::Bomberloutre::MapClassic*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::MapClassic*);

::Ice::Object* upCast(::Bomberloutre::MapSurvival*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::MapSurvival*);

::Ice::Object* upCast(::Bomberloutre::MapFogOfWar*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::MapFogOfWar*);

::Ice::Object* upCast(::Bomberloutre::MapObserver*);
::IceProxy::Ice::Object* upCast(::IceProxy::Bomberloutre::MapObserver*);

}

namespace Bomberloutre
{

typedef ::IceInternal::Handle< ::Bomberloutre::Map> MapPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::Map> MapPrx;

void __read(::IceInternal::BasicStream*, MapPrx&);
void __patch__MapPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Bomberloutre::MapClassic> MapClassicPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::MapClassic> MapClassicPrx;

void __read(::IceInternal::BasicStream*, MapClassicPrx&);
void __patch__MapClassicPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Bomberloutre::MapSurvival> MapSurvivalPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::MapSurvival> MapSurvivalPrx;

void __read(::IceInternal::BasicStream*, MapSurvivalPrx&);
void __patch__MapSurvivalPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Bomberloutre::MapFogOfWar> MapFogOfWarPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::MapFogOfWar> MapFogOfWarPrx;

void __read(::IceInternal::BasicStream*, MapFogOfWarPrx&);
void __patch__MapFogOfWarPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Bomberloutre::MapObserver> MapObserverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bomberloutre::MapObserver> MapObserverPrx;

void __read(::IceInternal::BasicStream*, MapObserverPrx&);
void __patch__MapObserverPtr(void*, ::Ice::ObjectPtr&);

}

namespace Bomberloutre
{

struct Point
{
    ::Ice::Int x;
    ::Ice::Int y;

    bool operator==(const Point& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Point& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Point& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Point& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Point& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Point& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace Bomberloutre
{

class Callback_Map_loadMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Map_loadMap_Base> Callback_Map_loadMapPtr;

class Callback_Map_checkMove_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Map_checkMove_Base> Callback_Map_checkMovePtr;

class Callback_MapObserver_refreshAll_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MapObserver_refreshAll_Base> Callback_MapObserver_refreshAllPtr;

class Callback_MapObserver_refreshPlayers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MapObserver_refreshPlayers_Base> Callback_MapObserver_refreshPlayersPtr;

class Callback_MapObserver_bombHasBeenPlanted_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MapObserver_bombHasBeenPlanted_Base> Callback_MapObserver_bombHasBeenPlantedPtr;

class Callback_MapObserver_bombExploded_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MapObserver_bombExploded_Base> Callback_MapObserver_bombExplodedPtr;

class Callback_MapObserver_bonusDropped_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MapObserver_bonusDropped_Base> Callback_MapObserver_bonusDroppedPtr;

}

namespace IceProxy
{

namespace Bomberloutre
{

class Map : virtual public ::IceProxy::Ice::Object
{
public:

    void loadMap(const ::std::string& id)
    {
        loadMap(id, 0);
    }
    void loadMap(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        loadMap(id, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_loadMap(const ::std::string& id)
    {
        return begin_loadMap(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadMap(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_loadMap(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadMap(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadMap(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadMap(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadMap(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadMap(const ::std::string& id, const ::Bomberloutre::Callback_Map_loadMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadMap(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadMap(const ::std::string& id, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_Map_loadMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadMap(id, &__ctx, __del, __cookie);
    }

    void end_loadMap(const ::Ice::AsyncResultPtr&);
    
private:

    void loadMap(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadMap(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt)
    {
        return checkMove(p, pt, 0);
    }
    bool checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::Context& __ctx)
    {
        return checkMove(p, pt, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt)
    {
        return begin_checkMove(p, pt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::Context& __ctx)
    {
        return begin_checkMove(p, pt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkMove(p, pt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkMove(p, pt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Bomberloutre::Callback_Map_checkMovePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkMove(p, pt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_Map_checkMovePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkMove(p, pt, &__ctx, __del, __cookie);
    }

    bool end_checkMove(const ::Ice::AsyncResultPtr&);
    
private:

    bool checkMove(const ::Bomberloutre::PlayerPtr&, const ::Bomberloutre::Point&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkMove(const ::Bomberloutre::PlayerPtr&, const ::Bomberloutre::Point&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Map> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Map> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Map*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Map*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MapClassic : virtual public ::IceProxy::Bomberloutre::Map
{
public:
    
    ::IceInternal::ProxyHandle<MapClassic> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapClassic> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapClassic*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<MapClassic*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MapSurvival : virtual public ::IceProxy::Bomberloutre::Map
{
public:
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapSurvival> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapSurvival*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<MapSurvival*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MapFogOfWar : virtual public ::IceProxy::Bomberloutre::Map
{
public:
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapFogOfWar> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapFogOfWar*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<MapFogOfWar*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MapObserver : virtual public ::IceProxy::Ice::Object
{
public:

    void refreshAll(const ::Bomberloutre::MapPtr& m)
    {
        refreshAll(m, 0);
    }
    void refreshAll(const ::Bomberloutre::MapPtr& m, const ::Ice::Context& __ctx)
    {
        refreshAll(m, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_refreshAll(const ::Bomberloutre::MapPtr& m)
    {
        return begin_refreshAll(m, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshAll(const ::Bomberloutre::MapPtr& m, const ::Ice::Context& __ctx)
    {
        return begin_refreshAll(m, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshAll(const ::Bomberloutre::MapPtr& m, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshAll(m, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshAll(const ::Bomberloutre::MapPtr& m, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshAll(m, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshAll(const ::Bomberloutre::MapPtr& m, const ::Bomberloutre::Callback_MapObserver_refreshAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshAll(m, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshAll(const ::Bomberloutre::MapPtr& m, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_MapObserver_refreshAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshAll(m, &__ctx, __del, __cookie);
    }

    void end_refreshAll(const ::Ice::AsyncResultPtr&);
    
private:

    void refreshAll(const ::Bomberloutre::MapPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refreshAll(const ::Bomberloutre::MapPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void refreshPlayers(const ::Bomberloutre::PlayerList& p)
    {
        refreshPlayers(p, 0);
    }
    void refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Ice::Context& __ctx)
    {
        refreshPlayers(p, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_refreshPlayers(const ::Bomberloutre::PlayerList& p)
    {
        return begin_refreshPlayers(p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Ice::Context& __ctx)
    {
        return begin_refreshPlayers(p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshPlayers(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshPlayers(p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Bomberloutre::Callback_MapObserver_refreshPlayersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshPlayers(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_MapObserver_refreshPlayersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshPlayers(p, &__ctx, __del, __cookie);
    }

    void end_refreshPlayers(const ::Ice::AsyncResultPtr&);
    
private:

    void refreshPlayers(const ::Bomberloutre::PlayerList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refreshPlayers(const ::Bomberloutre::PlayerList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b)
    {
        bombHasBeenPlanted(b, 0);
    }
    void bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Ice::Context& __ctx)
    {
        bombHasBeenPlanted(b, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b)
    {
        return begin_bombHasBeenPlanted(b, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Ice::Context& __ctx)
    {
        return begin_bombHasBeenPlanted(b, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bombHasBeenPlanted(b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bombHasBeenPlanted(b, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Bomberloutre::Callback_MapObserver_bombHasBeenPlantedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bombHasBeenPlanted(b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_MapObserver_bombHasBeenPlantedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bombHasBeenPlanted(b, &__ctx, __del, __cookie);
    }

    void end_bombHasBeenPlanted(const ::Ice::AsyncResultPtr&);
    
private:

    void bombHasBeenPlanted(const ::Bomberloutre::BombPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_bombHasBeenPlanted(const ::Bomberloutre::BombPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void bombExploded(const ::Bomberloutre::BombPtr& b)
    {
        bombExploded(b, 0);
    }
    void bombExploded(const ::Bomberloutre::BombPtr& b, const ::Ice::Context& __ctx)
    {
        bombExploded(b, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_bombExploded(const ::Bomberloutre::BombPtr& b)
    {
        return begin_bombExploded(b, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_bombExploded(const ::Bomberloutre::BombPtr& b, const ::Ice::Context& __ctx)
    {
        return begin_bombExploded(b, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_bombExploded(const ::Bomberloutre::BombPtr& b, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bombExploded(b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bombExploded(const ::Bomberloutre::BombPtr& b, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bombExploded(b, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bombExploded(const ::Bomberloutre::BombPtr& b, const ::Bomberloutre::Callback_MapObserver_bombExplodedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bombExploded(b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bombExploded(const ::Bomberloutre::BombPtr& b, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_MapObserver_bombExplodedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bombExploded(b, &__ctx, __del, __cookie);
    }

    void end_bombExploded(const ::Ice::AsyncResultPtr&);
    
private:

    void bombExploded(const ::Bomberloutre::BombPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_bombExploded(const ::Bomberloutre::BombPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void bonusDropped(const ::Bomberloutre::BonusPtr& b)
    {
        bonusDropped(b, 0);
    }
    void bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context& __ctx)
    {
        bonusDropped(b, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_bonusDropped(const ::Bomberloutre::BonusPtr& b)
    {
        return begin_bonusDropped(b, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context& __ctx)
    {
        return begin_bonusDropped(b, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bonusDropped(b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bonusDropped(b, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Bomberloutre::Callback_MapObserver_bonusDroppedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bonusDropped(b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context& __ctx, const ::Bomberloutre::Callback_MapObserver_bonusDroppedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bonusDropped(b, &__ctx, __del, __cookie);
    }

    void end_bonusDropped(const ::Ice::AsyncResultPtr&);
    
private:

    void bonusDropped(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_bonusDropped(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MapObserver> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MapObserver> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MapObserver*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<MapObserver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Bomberloutre
{

class Map : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void loadMap(const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool checkMove(const ::Bomberloutre::PlayerPtr&, const ::Bomberloutre::Point&, const ::Ice::Context*) = 0;
};

class MapClassic : virtual public ::IceDelegate::Bomberloutre::Map
{
public:
};

class MapSurvival : virtual public ::IceDelegate::Bomberloutre::Map
{
public:
};

class MapFogOfWar : virtual public ::IceDelegate::Bomberloutre::Map
{
public:
};

class MapObserver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void refreshAll(const ::Bomberloutre::MapPtr&, const ::Ice::Context*) = 0;

    virtual void refreshPlayers(const ::Bomberloutre::PlayerList&, const ::Ice::Context*) = 0;

    virtual void bombHasBeenPlanted(const ::Bomberloutre::BombPtr&, const ::Ice::Context*) = 0;

    virtual void bombExploded(const ::Bomberloutre::BombPtr&, const ::Ice::Context*) = 0;

    virtual void bonusDropped(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace Bomberloutre
{

class Map : virtual public ::IceDelegate::Bomberloutre::Map,
            virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void loadMap(const ::std::string&, const ::Ice::Context*);

    virtual bool checkMove(const ::Bomberloutre::PlayerPtr&, const ::Bomberloutre::Point&, const ::Ice::Context*);
};

class MapClassic : virtual public ::IceDelegate::Bomberloutre::MapClassic,
                   virtual public ::IceDelegateM::Bomberloutre::Map
{
public:
};

class MapSurvival : virtual public ::IceDelegate::Bomberloutre::MapSurvival,
                    virtual public ::IceDelegateM::Bomberloutre::Map
{
public:
};

class MapFogOfWar : virtual public ::IceDelegate::Bomberloutre::MapFogOfWar,
                    virtual public ::IceDelegateM::Bomberloutre::Map
{
public:
};

class MapObserver : virtual public ::IceDelegate::Bomberloutre::MapObserver,
                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void refreshAll(const ::Bomberloutre::MapPtr&, const ::Ice::Context*);

    virtual void refreshPlayers(const ::Bomberloutre::PlayerList&, const ::Ice::Context*);

    virtual void bombHasBeenPlanted(const ::Bomberloutre::BombPtr&, const ::Ice::Context*);

    virtual void bombExploded(const ::Bomberloutre::BombPtr&, const ::Ice::Context*);

    virtual void bonusDropped(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace Bomberloutre
{

class Map : virtual public ::IceDelegate::Bomberloutre::Map,
            virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void loadMap(const ::std::string&, const ::Ice::Context*);

    virtual bool checkMove(const ::Bomberloutre::PlayerPtr&, const ::Bomberloutre::Point&, const ::Ice::Context*);
};

class MapClassic : virtual public ::IceDelegate::Bomberloutre::MapClassic,
                   virtual public ::IceDelegateD::Bomberloutre::Map
{
public:
};

class MapSurvival : virtual public ::IceDelegate::Bomberloutre::MapSurvival,
                    virtual public ::IceDelegateD::Bomberloutre::Map
{
public:
};

class MapFogOfWar : virtual public ::IceDelegate::Bomberloutre::MapFogOfWar,
                    virtual public ::IceDelegateD::Bomberloutre::Map
{
public:
};

class MapObserver : virtual public ::IceDelegate::Bomberloutre::MapObserver,
                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void refreshAll(const ::Bomberloutre::MapPtr&, const ::Ice::Context*);

    virtual void refreshPlayers(const ::Bomberloutre::PlayerList&, const ::Ice::Context*);

    virtual void bombHasBeenPlanted(const ::Bomberloutre::BombPtr&, const ::Ice::Context*);

    virtual void bombExploded(const ::Bomberloutre::BombPtr&, const ::Ice::Context*);

    virtual void bonusDropped(const ::Bomberloutre::BonusPtr&, const ::Ice::Context*);
};

}

}

namespace Bomberloutre
{

class Map : virtual public ::Ice::Object, private IceInternal::GCShared
{
public:

    typedef MapPrx ProxyType;
    typedef MapPtr PointerType;
    
    Map() {}
    Map(const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Bomberloutre::MapItems&, const ::Bomberloutre::PlayerList&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesClasses();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual void loadMap(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool checkMove(const ::Bomberloutre::PlayerPtr&, const ::Bomberloutre::Point&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___checkMove(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    ::std::string id;

    ::Ice::Int width;

    ::Ice::Int height;

    ::Bomberloutre::MapItems items;

    ::Bomberloutre::PlayerList players;
};

inline bool operator==(const Map& l, const Map& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Map& l, const Map& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MapClassic : public ::Bomberloutre::Map
{
public:

    typedef MapClassicPrx ProxyType;
    typedef MapClassicPtr PointerType;
    
    MapClassic() {}
    MapClassic(const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Bomberloutre::MapItems&, const ::Bomberloutre::PlayerList&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const MapClassic& l, const MapClassic& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MapClassic& l, const MapClassic& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MapSurvival : public ::Bomberloutre::Map
{
public:

    typedef MapSurvivalPrx ProxyType;
    typedef MapSurvivalPtr PointerType;
    
    MapSurvival() {}
    MapSurvival(const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Bomberloutre::MapItems&, const ::Bomberloutre::PlayerList&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const MapSurvival& l, const MapSurvival& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MapSurvival& l, const MapSurvival& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MapFogOfWar : public ::Bomberloutre::Map
{
public:

    typedef MapFogOfWarPrx ProxyType;
    typedef MapFogOfWarPtr PointerType;
    
    MapFogOfWar() {}
    MapFogOfWar(const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Bomberloutre::MapItems&, const ::Bomberloutre::PlayerList&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const MapFogOfWar& l, const MapFogOfWar& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MapFogOfWar& l, const MapFogOfWar& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MapObserver : virtual public ::Ice::Object
{
public:

    typedef MapObserverPrx ProxyType;
    typedef MapObserverPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void refreshAll(const ::Bomberloutre::MapPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refreshAll(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void refreshPlayers(const ::Bomberloutre::PlayerList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refreshPlayers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void bombHasBeenPlanted(const ::Bomberloutre::BombPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___bombHasBeenPlanted(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void bombExploded(const ::Bomberloutre::BombPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___bombExploded(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void bonusDropped(const ::Bomberloutre::BonusPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___bonusDropped(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const MapObserver& l, const MapObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MapObserver& l, const MapObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Bomberloutre
{

template<class T>
class CallbackNC_Map_loadMap : public Callback_Map_loadMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Map_loadMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Map_loadMapPtr
newCallback_Map_loadMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Map_loadMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Map_loadMapPtr
newCallback_Map_loadMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Map_loadMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Map_loadMapPtr
newCallback_Map_loadMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Map_loadMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Map_loadMapPtr
newCallback_Map_loadMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Map_loadMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Map_loadMap : public Callback_Map_loadMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Map_loadMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Map_loadMapPtr
newCallback_Map_loadMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Map_loadMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Map_loadMapPtr
newCallback_Map_loadMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Map_loadMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Map_loadMapPtr
newCallback_Map_loadMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Map_loadMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Map_loadMapPtr
newCallback_Map_loadMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Map_loadMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Map_checkMove : public Callback_Map_checkMove_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Map_checkMove(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::MapPrx __proxy = ::Bomberloutre::MapPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkMove(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Map_checkMovePtr
newCallback_Map_checkMove(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Map_checkMove<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Map_checkMovePtr
newCallback_Map_checkMove(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Map_checkMove<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Map_checkMove : public Callback_Map_checkMove_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Map_checkMove(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bomberloutre::MapPrx __proxy = ::Bomberloutre::MapPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkMove(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Map_checkMovePtr
newCallback_Map_checkMove(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Map_checkMove<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Map_checkMovePtr
newCallback_Map_checkMove(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Map_checkMove<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MapObserver_refreshAll : public Callback_MapObserver_refreshAll_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MapObserver_refreshAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MapObserver_refreshAllPtr
newCallback_MapObserver_refreshAll(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_refreshAll<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_refreshAllPtr
newCallback_MapObserver_refreshAll(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_refreshAll<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MapObserver_refreshAllPtr
newCallback_MapObserver_refreshAll(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_refreshAll<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_refreshAllPtr
newCallback_MapObserver_refreshAll(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_refreshAll<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MapObserver_refreshAll : public Callback_MapObserver_refreshAll_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MapObserver_refreshAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MapObserver_refreshAllPtr
newCallback_MapObserver_refreshAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_refreshAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_refreshAllPtr
newCallback_MapObserver_refreshAll(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_refreshAll<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_refreshAllPtr
newCallback_MapObserver_refreshAll(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_refreshAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_refreshAllPtr
newCallback_MapObserver_refreshAll(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_refreshAll<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MapObserver_refreshPlayers : public Callback_MapObserver_refreshPlayers_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MapObserver_refreshPlayers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MapObserver_refreshPlayersPtr
newCallback_MapObserver_refreshPlayers(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_refreshPlayers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_refreshPlayersPtr
newCallback_MapObserver_refreshPlayers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_refreshPlayers<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MapObserver_refreshPlayersPtr
newCallback_MapObserver_refreshPlayers(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_refreshPlayers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_refreshPlayersPtr
newCallback_MapObserver_refreshPlayers(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_refreshPlayers<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MapObserver_refreshPlayers : public Callback_MapObserver_refreshPlayers_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MapObserver_refreshPlayers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MapObserver_refreshPlayersPtr
newCallback_MapObserver_refreshPlayers(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_refreshPlayers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_refreshPlayersPtr
newCallback_MapObserver_refreshPlayers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_refreshPlayers<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_refreshPlayersPtr
newCallback_MapObserver_refreshPlayers(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_refreshPlayers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_refreshPlayersPtr
newCallback_MapObserver_refreshPlayers(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_refreshPlayers<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MapObserver_bombHasBeenPlanted : public Callback_MapObserver_bombHasBeenPlanted_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MapObserver_bombHasBeenPlanted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MapObserver_bombHasBeenPlantedPtr
newCallback_MapObserver_bombHasBeenPlanted(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bombHasBeenPlanted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_bombHasBeenPlantedPtr
newCallback_MapObserver_bombHasBeenPlanted(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bombHasBeenPlanted<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MapObserver_bombHasBeenPlantedPtr
newCallback_MapObserver_bombHasBeenPlanted(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bombHasBeenPlanted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_bombHasBeenPlantedPtr
newCallback_MapObserver_bombHasBeenPlanted(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bombHasBeenPlanted<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MapObserver_bombHasBeenPlanted : public Callback_MapObserver_bombHasBeenPlanted_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MapObserver_bombHasBeenPlanted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MapObserver_bombHasBeenPlantedPtr
newCallback_MapObserver_bombHasBeenPlanted(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bombHasBeenPlanted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_bombHasBeenPlantedPtr
newCallback_MapObserver_bombHasBeenPlanted(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bombHasBeenPlanted<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_bombHasBeenPlantedPtr
newCallback_MapObserver_bombHasBeenPlanted(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bombHasBeenPlanted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_bombHasBeenPlantedPtr
newCallback_MapObserver_bombHasBeenPlanted(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bombHasBeenPlanted<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MapObserver_bombExploded : public Callback_MapObserver_bombExploded_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MapObserver_bombExploded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MapObserver_bombExplodedPtr
newCallback_MapObserver_bombExploded(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bombExploded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_bombExplodedPtr
newCallback_MapObserver_bombExploded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bombExploded<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MapObserver_bombExplodedPtr
newCallback_MapObserver_bombExploded(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bombExploded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_bombExplodedPtr
newCallback_MapObserver_bombExploded(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bombExploded<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MapObserver_bombExploded : public Callback_MapObserver_bombExploded_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MapObserver_bombExploded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MapObserver_bombExplodedPtr
newCallback_MapObserver_bombExploded(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bombExploded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_bombExplodedPtr
newCallback_MapObserver_bombExploded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bombExploded<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_bombExplodedPtr
newCallback_MapObserver_bombExploded(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bombExploded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_bombExplodedPtr
newCallback_MapObserver_bombExploded(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bombExploded<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MapObserver_bonusDropped : public Callback_MapObserver_bonusDropped_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MapObserver_bonusDropped(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MapObserver_bonusDroppedPtr
newCallback_MapObserver_bonusDropped(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bonusDropped<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_bonusDroppedPtr
newCallback_MapObserver_bonusDropped(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bonusDropped<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MapObserver_bonusDroppedPtr
newCallback_MapObserver_bonusDropped(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bonusDropped<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MapObserver_bonusDroppedPtr
newCallback_MapObserver_bonusDropped(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MapObserver_bonusDropped<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MapObserver_bonusDropped : public Callback_MapObserver_bonusDropped_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MapObserver_bonusDropped(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MapObserver_bonusDroppedPtr
newCallback_MapObserver_bonusDropped(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bonusDropped<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_bonusDroppedPtr
newCallback_MapObserver_bonusDropped(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bonusDropped<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_bonusDroppedPtr
newCallback_MapObserver_bonusDropped(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bonusDropped<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MapObserver_bonusDroppedPtr
newCallback_MapObserver_bonusDropped(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MapObserver_bonusDropped<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
