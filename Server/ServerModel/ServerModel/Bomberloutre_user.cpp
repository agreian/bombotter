// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Bomberloutre_user.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Bomberloutre_user.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __Bomberloutre__UserConnection__connect_name = "connect";

static const ::std::string __Bomberloutre__UserConnection__createUser_name = "createUser";

static const ::std::string __Bomberloutre__User__deleteUser_name = "deleteUser";

static const ::std::string __Bomberloutre__User__addWin_name = "addWin";

static const ::std::string __Bomberloutre__User__addDraw_name = "addDraw";

static const ::std::string __Bomberloutre__User__addLoose_name = "addLoose";

static const ::std::string __Bomberloutre__User__commit_name = "commit";

::Ice::Object* IceInternal::upCast(::Bomberloutre::UserConnection* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::UserConnection* p) { return p; }

::Ice::Object* IceInternal::upCast(::Bomberloutre::User* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::User* p) { return p; }

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::UserConnectionPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::UserConnection;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::UserPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::User;
        v->__copyFrom(proxy);
    }
}

Bomberloutre::UserException::UserException(const ::std::string& __ice_reason) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException(),
#else
    ::Ice::UserException(),
#endif
    reason(__ice_reason)
{
}

Bomberloutre::UserException::~UserException() throw()
{
}

static const char* __Bomberloutre__UserException_name = "Bomberloutre::UserException";

::std::string
Bomberloutre::UserException::ice_name() const
{
    return __Bomberloutre__UserException_name;
}

::Ice::Exception*
Bomberloutre::UserException::ice_clone() const
{
    return new UserException(*this);
}

void
Bomberloutre::UserException::ice_throw() const
{
    throw *this;
}

void
Bomberloutre::UserException::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(::std::string("::Bomberloutre::UserException"), false);
    __os->startWriteSlice();
    __os->write(reason);
    __os->endWriteSlice();
}

void
Bomberloutre::UserException::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->read(myId, false);
    }
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::UserException::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception Bomberloutre::UserException was not generated with stream support";
    throw ex;
}

void
Bomberloutre::UserException::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception Bomberloutre::UserException was not generated with stream support";
    throw ex;
}
#endif

struct __F__Bomberloutre__UserException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow()
    {
        throw ::Bomberloutre::UserException();
    }
};

static ::IceInternal::UserExceptionFactoryPtr __F__Bomberloutre__UserException__Ptr = new __F__Bomberloutre__UserException;

const ::IceInternal::UserExceptionFactoryPtr&
Bomberloutre::UserException::ice_factory()
{
    return __F__Bomberloutre__UserException__Ptr;
}

class __F__Bomberloutre__UserException__Init
{
public:

    __F__Bomberloutre__UserException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bomberloutre::UserException", ::Bomberloutre::UserException::ice_factory());
    }

    ~__F__Bomberloutre__UserException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bomberloutre::UserException");
    }
};

static __F__Bomberloutre__UserException__Init __F__Bomberloutre__UserException__i;

#ifdef __APPLE__
extern "C" { void __F__Bomberloutre__UserException__initializer() {} }
#endif

Bomberloutre::BadLoginException::BadLoginException(const ::std::string& __ice_reason) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException(__ice_reason)
#else
    ::Bomberloutre::UserException(__ice_reason)
#endif
{
}

Bomberloutre::BadLoginException::~BadLoginException() throw()
{
}

static const char* __Bomberloutre__BadLoginException_name = "Bomberloutre::BadLoginException";

::std::string
Bomberloutre::BadLoginException::ice_name() const
{
    return __Bomberloutre__BadLoginException_name;
}

::Ice::Exception*
Bomberloutre::BadLoginException::ice_clone() const
{
    return new BadLoginException(*this);
}

void
Bomberloutre::BadLoginException::ice_throw() const
{
    throw *this;
}

void
Bomberloutre::BadLoginException::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(::std::string("::Bomberloutre::BadLoginException"), false);
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException::__write(__os);
#else
    ::Bomberloutre::UserException::__write(__os);
#endif
}

void
Bomberloutre::BadLoginException::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->read(myId, false);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException::__read(__is, true);
#else
    ::Bomberloutre::UserException::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::BadLoginException::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception Bomberloutre::BadLoginException was not generated with stream support";
    throw ex;
}

void
Bomberloutre::BadLoginException::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception Bomberloutre::BadLoginException was not generated with stream support";
    throw ex;
}
#endif

struct __F__Bomberloutre__BadLoginException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow()
    {
        throw ::Bomberloutre::BadLoginException();
    }
};

static ::IceInternal::UserExceptionFactoryPtr __F__Bomberloutre__BadLoginException__Ptr = new __F__Bomberloutre__BadLoginException;

const ::IceInternal::UserExceptionFactoryPtr&
Bomberloutre::BadLoginException::ice_factory()
{
    return __F__Bomberloutre__BadLoginException__Ptr;
}

class __F__Bomberloutre__BadLoginException__Init
{
public:

    __F__Bomberloutre__BadLoginException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bomberloutre::BadLoginException", ::Bomberloutre::BadLoginException::ice_factory());
    }

    ~__F__Bomberloutre__BadLoginException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bomberloutre::BadLoginException");
    }
};

static __F__Bomberloutre__BadLoginException__Init __F__Bomberloutre__BadLoginException__i;

#ifdef __APPLE__
extern "C" { void __F__Bomberloutre__BadLoginException__initializer() {} }
#endif

Bomberloutre::BadPasswordException::BadPasswordException(const ::std::string& __ice_reason) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException(__ice_reason)
#else
    ::Bomberloutre::UserException(__ice_reason)
#endif
{
}

Bomberloutre::BadPasswordException::~BadPasswordException() throw()
{
}

static const char* __Bomberloutre__BadPasswordException_name = "Bomberloutre::BadPasswordException";

::std::string
Bomberloutre::BadPasswordException::ice_name() const
{
    return __Bomberloutre__BadPasswordException_name;
}

::Ice::Exception*
Bomberloutre::BadPasswordException::ice_clone() const
{
    return new BadPasswordException(*this);
}

void
Bomberloutre::BadPasswordException::ice_throw() const
{
    throw *this;
}

void
Bomberloutre::BadPasswordException::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(::std::string("::Bomberloutre::BadPasswordException"), false);
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException::__write(__os);
#else
    ::Bomberloutre::UserException::__write(__os);
#endif
}

void
Bomberloutre::BadPasswordException::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->read(myId, false);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException::__read(__is, true);
#else
    ::Bomberloutre::UserException::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::BadPasswordException::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception Bomberloutre::BadPasswordException was not generated with stream support";
    throw ex;
}

void
Bomberloutre::BadPasswordException::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception Bomberloutre::BadPasswordException was not generated with stream support";
    throw ex;
}
#endif

struct __F__Bomberloutre__BadPasswordException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow()
    {
        throw ::Bomberloutre::BadPasswordException();
    }
};

static ::IceInternal::UserExceptionFactoryPtr __F__Bomberloutre__BadPasswordException__Ptr = new __F__Bomberloutre__BadPasswordException;

const ::IceInternal::UserExceptionFactoryPtr&
Bomberloutre::BadPasswordException::ice_factory()
{
    return __F__Bomberloutre__BadPasswordException__Ptr;
}

class __F__Bomberloutre__BadPasswordException__Init
{
public:

    __F__Bomberloutre__BadPasswordException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bomberloutre::BadPasswordException", ::Bomberloutre::BadPasswordException::ice_factory());
    }

    ~__F__Bomberloutre__BadPasswordException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bomberloutre::BadPasswordException");
    }
};

static __F__Bomberloutre__BadPasswordException__Init __F__Bomberloutre__BadPasswordException__i;

#ifdef __APPLE__
extern "C" { void __F__Bomberloutre__BadPasswordException__initializer() {} }
#endif

Bomberloutre::UserAlreadyExistsException::UserAlreadyExistsException(const ::std::string& __ice_reason) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException(__ice_reason)
#else
    ::Bomberloutre::UserException(__ice_reason)
#endif
{
}

Bomberloutre::UserAlreadyExistsException::~UserAlreadyExistsException() throw()
{
}

static const char* __Bomberloutre__UserAlreadyExistsException_name = "Bomberloutre::UserAlreadyExistsException";

::std::string
Bomberloutre::UserAlreadyExistsException::ice_name() const
{
    return __Bomberloutre__UserAlreadyExistsException_name;
}

::Ice::Exception*
Bomberloutre::UserAlreadyExistsException::ice_clone() const
{
    return new UserAlreadyExistsException(*this);
}

void
Bomberloutre::UserAlreadyExistsException::ice_throw() const
{
    throw *this;
}

void
Bomberloutre::UserAlreadyExistsException::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(::std::string("::Bomberloutre::UserAlreadyExistsException"), false);
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException::__write(__os);
#else
    ::Bomberloutre::UserException::__write(__os);
#endif
}

void
Bomberloutre::UserAlreadyExistsException::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->read(myId, false);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException::__read(__is, true);
#else
    ::Bomberloutre::UserException::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::UserAlreadyExistsException::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception Bomberloutre::UserAlreadyExistsException was not generated with stream support";
    throw ex;
}

void
Bomberloutre::UserAlreadyExistsException::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception Bomberloutre::UserAlreadyExistsException was not generated with stream support";
    throw ex;
}
#endif

struct __F__Bomberloutre__UserAlreadyExistsException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow()
    {
        throw ::Bomberloutre::UserAlreadyExistsException();
    }
};

static ::IceInternal::UserExceptionFactoryPtr __F__Bomberloutre__UserAlreadyExistsException__Ptr = new __F__Bomberloutre__UserAlreadyExistsException;

const ::IceInternal::UserExceptionFactoryPtr&
Bomberloutre::UserAlreadyExistsException::ice_factory()
{
    return __F__Bomberloutre__UserAlreadyExistsException__Ptr;
}

class __F__Bomberloutre__UserAlreadyExistsException__Init
{
public:

    __F__Bomberloutre__UserAlreadyExistsException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bomberloutre::UserAlreadyExistsException", ::Bomberloutre::UserAlreadyExistsException::ice_factory());
    }

    ~__F__Bomberloutre__UserAlreadyExistsException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bomberloutre::UserAlreadyExistsException");
    }
};

static __F__Bomberloutre__UserAlreadyExistsException__Init __F__Bomberloutre__UserAlreadyExistsException__i;

#ifdef __APPLE__
extern "C" { void __F__Bomberloutre__UserAlreadyExistsException__initializer() {} }
#endif

void
Bomberloutre::__writeUserList(::IceInternal::BasicStream* __os, const ::Bomberloutre::UserPtr* begin, const ::Bomberloutre::UserPtr* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(begin[i].get())));
    }
}

void
Bomberloutre::__readUserList(::IceInternal::BasicStream* __is, ::Bomberloutre::UserList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(4, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        __is->read(::Bomberloutre::__patch__UserPtr, &v[i]);
    }
}

IceAsync::Bomberloutre::AMD_UserConnection_connect::AMD_UserConnection_connect(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Bomberloutre::AMD_UserConnection_connect::ice_response(const ::Bomberloutre::UserPtr& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = this->__os();
            __os->write(::Ice::ObjectPtr(::IceInternal::upCast(__ret.get())));
            __os->writePendingObjects();
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response(true);
    }
}

void
IceAsync::Bomberloutre::AMD_UserConnection_connect::ice_exception(const ::std::exception& ex)
{
    if(const ::Bomberloutre::BadLoginException* __ex = dynamic_cast<const ::Bomberloutre::BadLoginException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __os()->write(*__ex);
            __response(false);
        }
    }
    else if(const ::Bomberloutre::BadPasswordException* __ex = dynamic_cast<const ::Bomberloutre::BadPasswordException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __os()->write(*__ex);
            __response(false);
        }
    }
    else
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        IncomingAsync::ice_exception(ex);
#else
        ::IceInternal::IncomingAsync::ice_exception(ex);
#endif
    }
}

IceAsync::Bomberloutre::AMD_UserConnection_createUser::AMD_UserConnection_createUser(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Bomberloutre::AMD_UserConnection_createUser::ice_response(const ::Bomberloutre::UserPtr& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = this->__os();
            __os->write(::Ice::ObjectPtr(::IceInternal::upCast(__ret.get())));
            __os->writePendingObjects();
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response(true);
    }
}

void
IceAsync::Bomberloutre::AMD_UserConnection_createUser::ice_exception(const ::std::exception& ex)
{
    if(const ::Bomberloutre::BadPasswordException* __ex = dynamic_cast<const ::Bomberloutre::BadPasswordException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __os()->write(*__ex);
            __response(false);
        }
    }
    else if(const ::Bomberloutre::UserAlreadyExistsException* __ex = dynamic_cast<const ::Bomberloutre::UserAlreadyExistsException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __os()->write(*__ex);
            __response(false);
        }
    }
    else
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        IncomingAsync::ice_exception(ex);
#else
        ::IceInternal::IncomingAsync::ice_exception(ex);
#endif
    }
}

::Bomberloutre::UserPtr
IceProxy::Bomberloutre::UserConnection::connect(const ::std::string& login, const ::std::string& password, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__UserConnection__connect_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::UserConnection* __del = dynamic_cast< ::IceDelegate::Bomberloutre::UserConnection*>(__delBase.get());
            return __del->connect(login, password, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::UserConnection::begin_connect(const ::std::string& login, const ::std::string& password, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__UserConnection__connect_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__UserConnection__connect_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__UserConnection__connect_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(login);
        __os->write(password);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Bomberloutre::UserPtr
IceProxy::Bomberloutre::UserConnection::end_connect(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__UserConnection__connect_name);
    ::Bomberloutre::UserPtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Bomberloutre::BadLoginException&)
        {
            throw;
        }
        catch(const ::Bomberloutre::BadPasswordException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(::Bomberloutre::__patch__UserPtr, &__ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

::Bomberloutre::UserPtr
IceProxy::Bomberloutre::UserConnection::createUser(const ::std::string& login, const ::std::string& password, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__UserConnection__createUser_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::UserConnection* __del = dynamic_cast< ::IceDelegate::Bomberloutre::UserConnection*>(__delBase.get());
            return __del->createUser(login, password, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::UserConnection::begin_createUser(const ::std::string& login, const ::std::string& password, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__UserConnection__createUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__UserConnection__createUser_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__UserConnection__createUser_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(login);
        __os->write(password);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Bomberloutre::UserPtr
IceProxy::Bomberloutre::UserConnection::end_createUser(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__UserConnection__createUser_name);
    ::Bomberloutre::UserPtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Bomberloutre::BadPasswordException&)
        {
            throw;
        }
        catch(const ::Bomberloutre::UserAlreadyExistsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(::Bomberloutre::__patch__UserPtr, &__ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::Bomberloutre::UserConnection::ice_staticId()
{
    return ::Bomberloutre::UserConnection::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::UserConnection::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::UserConnection);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::UserConnection::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::UserConnection);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::UserConnection::__newInstance() const
{
    return new UserConnection;
}

bool
IceProxy::Bomberloutre::User::deleteUser(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__User__deleteUser_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::User* __del = dynamic_cast< ::IceDelegate::Bomberloutre::User*>(__delBase.get());
            return __del->deleteUser(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::User::begin_deleteUser(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__User__deleteUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__User__deleteUser_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__User__deleteUser_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Bomberloutre::User::end_deleteUser(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__User__deleteUser_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::Bomberloutre::User::addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::User* __del = dynamic_cast< ::IceDelegate::Bomberloutre::User*>(__delBase.get());
            __del->addWin(nbKill, nbDeath, nbSuicide, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::User::begin_addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__User__addWin_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__User__addWin_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nbKill);
        __os->write(nbDeath);
        __os->write(nbSuicide);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::User::end_addWin(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__User__addWin_name);
}

void
IceProxy::Bomberloutre::User::addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::User* __del = dynamic_cast< ::IceDelegate::Bomberloutre::User*>(__delBase.get());
            __del->addDraw(nbKill, nbDeath, nbSuicide, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::User::begin_addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__User__addDraw_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__User__addDraw_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nbKill);
        __os->write(nbDeath);
        __os->write(nbSuicide);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::User::end_addDraw(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__User__addDraw_name);
}

void
IceProxy::Bomberloutre::User::addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::User* __del = dynamic_cast< ::IceDelegate::Bomberloutre::User*>(__delBase.get());
            __del->addLoose(nbKill, nbDeath, nbSuicide, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::User::begin_addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__User__addLoose_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__User__addLoose_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nbKill);
        __os->write(nbDeath);
        __os->write(nbSuicide);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::User::end_addLoose(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__User__addLoose_name);
}

bool
IceProxy::Bomberloutre::User::commit(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__User__commit_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::User* __del = dynamic_cast< ::IceDelegate::Bomberloutre::User*>(__delBase.get());
            return __del->commit(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::User::begin_commit(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__User__commit_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__User__commit_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__User__commit_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Bomberloutre::User::end_commit(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__User__commit_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::Bomberloutre::User::ice_staticId()
{
    return ::Bomberloutre::User::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::User::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::User);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::User::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::User);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::User::__newInstance() const
{
    return new User;
}

::Bomberloutre::UserPtr
IceDelegateM::Bomberloutre::UserConnection::connect(const ::std::string& login, const ::std::string& password, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__UserConnection__connect_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(login);
        __os->write(password);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Bomberloutre::UserPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Bomberloutre::BadLoginException&)
            {
                throw;
            }
            catch(const ::Bomberloutre::BadPasswordException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(::Bomberloutre::__patch__UserPtr, &__ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Bomberloutre::UserPtr
IceDelegateM::Bomberloutre::UserConnection::createUser(const ::std::string& login, const ::std::string& password, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__UserConnection__createUser_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(login);
        __os->write(password);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Bomberloutre::UserPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Bomberloutre::BadPasswordException&)
            {
                throw;
            }
            catch(const ::Bomberloutre::UserAlreadyExistsException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(::Bomberloutre::__patch__UserPtr, &__ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Bomberloutre::User::deleteUser(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__User__deleteUser_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Bomberloutre::User::addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__User__addWin_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nbKill);
        __os->write(nbDeath);
        __os->write(nbSuicide);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::User::addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__User__addDraw_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nbKill);
        __os->write(nbDeath);
        __os->write(nbSuicide);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::User::addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__User__addLoose_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nbKill);
        __os->write(nbDeath);
        __os->write(nbSuicide);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

bool
IceDelegateM::Bomberloutre::User::commit(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__User__commit_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Bomberloutre::UserPtr
IceDelegateD::Bomberloutre::UserConnection::connect(const ::std::string&, const ::std::string&, const ::Ice::Context*)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Bomberloutre::UserPtr(); // to avoid a warning with some compilers;
}

::Bomberloutre::UserPtr
IceDelegateD::Bomberloutre::UserConnection::createUser(const ::std::string&, const ::std::string&, const ::Ice::Context*)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Bomberloutre::UserPtr(); // to avoid a warning with some compilers;
}

bool
IceDelegateD::Bomberloutre::User::deleteUser(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::User* servant = dynamic_cast< ::Bomberloutre::User*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->deleteUser(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__User__deleteUser_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Bomberloutre::User::addWin(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_nbKill(nbKill),
            _m_nbDeath(nbDeath),
            _m_nbSuicide(nbSuicide)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::User* servant = dynamic_cast< ::Bomberloutre::User*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->addWin(_m_nbKill, _m_nbDeath, _m_nbSuicide, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_nbKill;
        ::Ice::Int _m_nbDeath;
        ::Ice::Int _m_nbSuicide;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__User__addWin_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(nbKill, nbDeath, nbSuicide, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::User::addDraw(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_nbKill(nbKill),
            _m_nbDeath(nbDeath),
            _m_nbSuicide(nbSuicide)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::User* servant = dynamic_cast< ::Bomberloutre::User*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->addDraw(_m_nbKill, _m_nbDeath, _m_nbSuicide, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_nbKill;
        ::Ice::Int _m_nbDeath;
        ::Ice::Int _m_nbSuicide;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__User__addDraw_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(nbKill, nbDeath, nbSuicide, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::User::addLoose(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int nbKill, ::Ice::Int nbDeath, ::Ice::Int nbSuicide, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_nbKill(nbKill),
            _m_nbDeath(nbDeath),
            _m_nbSuicide(nbSuicide)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::User* servant = dynamic_cast< ::Bomberloutre::User*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->addLoose(_m_nbKill, _m_nbDeath, _m_nbSuicide, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_nbKill;
        ::Ice::Int _m_nbDeath;
        ::Ice::Int _m_nbSuicide;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__User__addLoose_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(nbKill, nbDeath, nbSuicide, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::Bomberloutre::User::commit(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::User* servant = dynamic_cast< ::Bomberloutre::User*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->commit(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__User__commit_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPtr
Bomberloutre::UserConnection::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__UserConnection_ids[2] =
{
    "::Bomberloutre::UserConnection",
    "::Ice::Object"
};

bool
Bomberloutre::UserConnection::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__UserConnection_ids, __Bomberloutre__UserConnection_ids + 2, _s);
}

::std::vector< ::std::string>
Bomberloutre::UserConnection::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__UserConnection_ids[0], &__Bomberloutre__UserConnection_ids[2]);
}

const ::std::string&
Bomberloutre::UserConnection::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__UserConnection_ids[0];
}

const ::std::string&
Bomberloutre::UserConnection::ice_staticId()
{
    return __Bomberloutre__UserConnection_ids[0];
}

::Ice::DispatchStatus
Bomberloutre::UserConnection::___connect(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string login;
    ::std::string password;
    __is->read(login);
    __is->read(password);
    __is->endReadEncaps();
    ::Bomberloutre::AMD_UserConnection_connectPtr __cb = new IceAsync::Bomberloutre::AMD_UserConnection_connect(__inS);
    try
    {
        connect_async(__cb, login, password, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Bomberloutre::UserConnection::___createUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string login;
    ::std::string password;
    __is->read(login);
    __is->read(password);
    __is->endReadEncaps();
    ::Bomberloutre::AMD_UserConnection_createUserPtr __cb = new IceAsync::Bomberloutre::AMD_UserConnection_createUser(__inS);
    try
    {
        createUser_async(__cb, login, password, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

static ::std::string __Bomberloutre__UserConnection_all[] =
{
    "connect",
    "createUser",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
Bomberloutre::UserConnection::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__UserConnection_all, __Bomberloutre__UserConnection_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__UserConnection_all)
    {
        case 0:
        {
            return ___connect(in, current);
        }
        case 1:
        {
            return ___createUser(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::UserConnection::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Bomberloutre::UserConnection::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::UserConnection::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::UserConnection was not generated with stream support";
    throw ex;
}

void
Bomberloutre::UserConnection::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::UserConnection was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__UserConnectionPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::UserConnectionPtr* p = static_cast< ::Bomberloutre::UserConnectionPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::UserConnectionPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::UserConnection::ice_staticId(), v->ice_id());
    }
}

Bomberloutre::User::User(const ::std::string& __ice_login, const ::std::string& __ice_password, ::Ice::Int __ice_nbGame, ::Ice::Int __ice_nbWin, ::Ice::Int __ice_nbDraw, ::Ice::Int __ice_nbKill, ::Ice::Int __ice_nbDeath, ::Ice::Int __ice_nbSuicide, const ::std::string& __ice_gameTag, const ::Bomberloutre::GamesManagerPrx& __ice_mgr) :
    login(__ice_login),
    password(__ice_password),
    nbGame(__ice_nbGame),
    nbWin(__ice_nbWin),
    nbDraw(__ice_nbDraw),
    nbKill(__ice_nbKill),
    nbDeath(__ice_nbDeath),
    nbSuicide(__ice_nbSuicide),
    gameTag(__ice_gameTag),
    mgr(__ice_mgr)
{
}

::Ice::ObjectPtr
Bomberloutre::User::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__User_ids[3] =
{
    "::Bomberloutre::User",
    "::Bomberloutre::UserConnection",
    "::Ice::Object"
};

bool
Bomberloutre::User::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__User_ids, __Bomberloutre__User_ids + 3, _s);
}

::std::vector< ::std::string>
Bomberloutre::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__User_ids[0], &__Bomberloutre__User_ids[3]);
}

const ::std::string&
Bomberloutre::User::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__User_ids[0];
}

const ::std::string&
Bomberloutre::User::ice_staticId()
{
    return __Bomberloutre__User_ids[0];
}

::Ice::DispatchStatus
Bomberloutre::User::___deleteUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = deleteUser(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::User::___addWin(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nbKill;
    ::Ice::Int nbDeath;
    ::Ice::Int nbSuicide;
    __is->read(nbKill);
    __is->read(nbDeath);
    __is->read(nbSuicide);
    __is->endReadEncaps();
    addWin(nbKill, nbDeath, nbSuicide, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::User::___addDraw(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nbKill;
    ::Ice::Int nbDeath;
    ::Ice::Int nbSuicide;
    __is->read(nbKill);
    __is->read(nbDeath);
    __is->read(nbSuicide);
    __is->endReadEncaps();
    addDraw(nbKill, nbDeath, nbSuicide, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::User::___addLoose(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nbKill;
    ::Ice::Int nbDeath;
    ::Ice::Int nbSuicide;
    __is->read(nbKill);
    __is->read(nbDeath);
    __is->read(nbSuicide);
    __is->endReadEncaps();
    addLoose(nbKill, nbDeath, nbSuicide, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::User::___commit(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = commit(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

static ::std::string __Bomberloutre__User_all[] =
{
    "addDraw",
    "addLoose",
    "addWin",
    "commit",
    "connect",
    "createUser",
    "deleteUser",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
Bomberloutre::User::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__User_all, __Bomberloutre__User_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__User_all)
    {
        case 0:
        {
            return ___addDraw(in, current);
        }
        case 1:
        {
            return ___addLoose(in, current);
        }
        case 2:
        {
            return ___addWin(in, current);
        }
        case 3:
        {
            return ___commit(in, current);
        }
        case 4:
        {
            return ___connect(in, current);
        }
        case 5:
        {
            return ___createUser(in, current);
        }
        case 6:
        {
            return ___deleteUser(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::User::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->write(login);
    __os->write(password);
    __os->write(nbGame);
    __os->write(nbWin);
    __os->write(nbDraw);
    __os->write(nbKill);
    __os->write(nbDeath);
    __os->write(nbSuicide);
    __os->write(gameTag);
    __os->write(::Ice::ObjectPrx(::IceInternal::upCast(mgr.get())));
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Bomberloutre::User::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->read(login);
    __is->read(password);
    __is->read(nbGame);
    __is->read(nbWin);
    __is->read(nbDraw);
    __is->read(nbKill);
    __is->read(nbDeath);
    __is->read(nbSuicide);
    __is->read(gameTag);
    ::Bomberloutre::__read(__is, mgr);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::User::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::User was not generated with stream support";
    throw ex;
}

void
Bomberloutre::User::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::User was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__UserPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::UserPtr* p = static_cast< ::Bomberloutre::UserPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::UserPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::User::ice_staticId(), v->ice_id());
    }
}
