// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Bomberloutre_map.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Bomberloutre_map.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __Bomberloutre__Map__loadMap_name = "loadMap";

static const ::std::string __Bomberloutre__Map__checkMove_name = "checkMove";

static const ::std::string __Bomberloutre__MapObserver__refreshAll_name = "refreshAll";

static const ::std::string __Bomberloutre__MapObserver__refreshPlayers_name = "refreshPlayers";

static const ::std::string __Bomberloutre__MapObserver__bombHasBeenPlanted_name = "bombHasBeenPlanted";

static const ::std::string __Bomberloutre__MapObserver__bombExploded_name = "bombExploded";

static const ::std::string __Bomberloutre__MapObserver__bonusDropped_name = "bonusDropped";

::Ice::Object* IceInternal::upCast(::Bomberloutre::Map* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::Map* p) { return p; }

::Ice::Object* IceInternal::upCast(::Bomberloutre::MapClassic* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::MapClassic* p) { return p; }

::Ice::Object* IceInternal::upCast(::Bomberloutre::MapSurvival* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::MapSurvival* p) { return p; }

::Ice::Object* IceInternal::upCast(::Bomberloutre::MapFogOfWar* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::MapFogOfWar* p) { return p; }

::Ice::Object* IceInternal::upCast(::Bomberloutre::MapObserver* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Bomberloutre::MapObserver* p) { return p; }

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::MapPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::Map;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::MapClassicPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::MapClassic;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::MapSurvivalPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::MapSurvival;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::MapFogOfWarPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::MapFogOfWar;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::__read(::IceInternal::BasicStream* __is, ::Bomberloutre::MapObserverPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bomberloutre::MapObserver;
        v->__copyFrom(proxy);
    }
}

void
Bomberloutre::Point::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(x);
    __os->write(y);
}

void
Bomberloutre::Point::__read(::IceInternal::BasicStream* __is)
{
    __is->read(x);
    __is->read(y);
}

void
IceProxy::Bomberloutre::Map::loadMap(const ::std::string& id, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Map* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Map*>(__delBase.get());
            __del->loadMap(id, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Map::begin_loadMap(const ::std::string& id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Map__loadMap_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Map__loadMap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(id);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::Map::end_loadMap(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__Map__loadMap_name);
}

bool
IceProxy::Bomberloutre::Map::checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bomberloutre__Map__checkMove_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::Map* __del = dynamic_cast< ::IceDelegate::Bomberloutre::Map*>(__delBase.get());
            return __del->checkMove(p, pt, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::Map::begin_checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bomberloutre__Map__checkMove_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__Map__checkMove_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__Map__checkMove_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(p.get())));
        pt.__write(__os);
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Bomberloutre::Map::end_checkMove(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bomberloutre__Map__checkMove_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::Bomberloutre::Map::ice_staticId()
{
    return ::Bomberloutre::Map::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::Map::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::Map);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::Map::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::Map);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::Map::__newInstance() const
{
    return new Map;
}

const ::std::string&
IceProxy::Bomberloutre::MapClassic::ice_staticId()
{
    return ::Bomberloutre::MapClassic::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::MapClassic::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::MapClassic);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::MapClassic::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::MapClassic);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::MapClassic::__newInstance() const
{
    return new MapClassic;
}

const ::std::string&
IceProxy::Bomberloutre::MapSurvival::ice_staticId()
{
    return ::Bomberloutre::MapSurvival::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::MapSurvival::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::MapSurvival);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::MapSurvival::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::MapSurvival);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::MapSurvival::__newInstance() const
{
    return new MapSurvival;
}

const ::std::string&
IceProxy::Bomberloutre::MapFogOfWar::ice_staticId()
{
    return ::Bomberloutre::MapFogOfWar::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::MapFogOfWar::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::MapFogOfWar);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::MapFogOfWar::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::MapFogOfWar);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::MapFogOfWar::__newInstance() const
{
    return new MapFogOfWar;
}

void
IceProxy::Bomberloutre::MapObserver::refreshAll(const ::Bomberloutre::MapPtr& m, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::MapObserver* __del = dynamic_cast< ::IceDelegate::Bomberloutre::MapObserver*>(__delBase.get());
            __del->refreshAll(m, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::MapObserver::begin_refreshAll(const ::Bomberloutre::MapPtr& m, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__MapObserver__refreshAll_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__MapObserver__refreshAll_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(m.get())));
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::MapObserver::end_refreshAll(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__MapObserver__refreshAll_name);
}

void
IceProxy::Bomberloutre::MapObserver::refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::MapObserver* __del = dynamic_cast< ::IceDelegate::Bomberloutre::MapObserver*>(__delBase.get());
            __del->refreshPlayers(p, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::MapObserver::begin_refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__MapObserver__refreshPlayers_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__MapObserver__refreshPlayers_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        if(p.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::Bomberloutre::__writePlayerList(__os, &p[0], &p[0] + p.size());
        }
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::MapObserver::end_refreshPlayers(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__MapObserver__refreshPlayers_name);
}

void
IceProxy::Bomberloutre::MapObserver::bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::MapObserver* __del = dynamic_cast< ::IceDelegate::Bomberloutre::MapObserver*>(__delBase.get());
            __del->bombHasBeenPlanted(b, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::MapObserver::begin_bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__MapObserver__bombHasBeenPlanted_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__MapObserver__bombHasBeenPlanted_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(b.get())));
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::MapObserver::end_bombHasBeenPlanted(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__MapObserver__bombHasBeenPlanted_name);
}

void
IceProxy::Bomberloutre::MapObserver::bombExploded(const ::Bomberloutre::BombPtr& b, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::MapObserver* __del = dynamic_cast< ::IceDelegate::Bomberloutre::MapObserver*>(__delBase.get());
            __del->bombExploded(b, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::MapObserver::begin_bombExploded(const ::Bomberloutre::BombPtr& b, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__MapObserver__bombExploded_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__MapObserver__bombExploded_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(b.get())));
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::MapObserver::end_bombExploded(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__MapObserver__bombExploded_name);
}

void
IceProxy::Bomberloutre::MapObserver::bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Bomberloutre::MapObserver* __del = dynamic_cast< ::IceDelegate::Bomberloutre::MapObserver*>(__delBase.get());
            __del->bonusDropped(b, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bomberloutre::MapObserver::begin_bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bomberloutre__MapObserver__bonusDropped_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bomberloutre__MapObserver__bonusDropped_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(b.get())));
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bomberloutre::MapObserver::end_bonusDropped(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Bomberloutre__MapObserver__bonusDropped_name);
}

const ::std::string&
IceProxy::Bomberloutre::MapObserver::ice_staticId()
{
    return ::Bomberloutre::MapObserver::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bomberloutre::MapObserver::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bomberloutre::MapObserver);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bomberloutre::MapObserver::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bomberloutre::MapObserver);
}

::IceProxy::Ice::Object*
IceProxy::Bomberloutre::MapObserver::__newInstance() const
{
    return new MapObserver;
}

void
IceDelegateM::Bomberloutre::Map::loadMap(const ::std::string& id, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Map__loadMap_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(id);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

bool
IceDelegateM::Bomberloutre::Map::checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__Map__checkMove_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(p.get())));
        pt.__write(__os);
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Bomberloutre::MapObserver::refreshAll(const ::Bomberloutre::MapPtr& m, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__MapObserver__refreshAll_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(m.get())));
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::MapObserver::refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__MapObserver__refreshPlayers_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        if(p.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::Bomberloutre::__writePlayerList(__os, &p[0], &p[0] + p.size());
        }
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::MapObserver::bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__MapObserver__bombHasBeenPlanted_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(b.get())));
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::MapObserver::bombExploded(const ::Bomberloutre::BombPtr& b, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__MapObserver__bombExploded_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(b.get())));
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Bomberloutre::MapObserver::bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bomberloutre__MapObserver__bonusDropped_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(b.get())));
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::Bomberloutre::Map::loadMap(const ::std::string& id, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& id, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_id(id)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Map* servant = dynamic_cast< ::Bomberloutre::Map*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->loadMap(_m_id, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_id;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Map__loadMap_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(id, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::Bomberloutre::Map::checkMove(const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Bomberloutre::PlayerPtr& p, const ::Bomberloutre::Point& pt, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(p),
            _m_pt(pt)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::Map* servant = dynamic_cast< ::Bomberloutre::Map*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->checkMove(_m_p, _m_pt, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::Bomberloutre::PlayerPtr& _m_p;
        const ::Bomberloutre::Point& _m_pt;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__Map__checkMove_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, p, pt, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Bomberloutre::MapObserver::refreshAll(const ::Bomberloutre::MapPtr& m, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Bomberloutre::MapPtr& m, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_m(m)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::MapObserver* servant = dynamic_cast< ::Bomberloutre::MapObserver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->refreshAll(_m_m, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Bomberloutre::MapPtr& _m_m;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__MapObserver__refreshAll_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(m, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::MapObserver::refreshPlayers(const ::Bomberloutre::PlayerList& p, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Bomberloutre::PlayerList& p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_p(p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::MapObserver* servant = dynamic_cast< ::Bomberloutre::MapObserver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->refreshPlayers(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Bomberloutre::PlayerList& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__MapObserver__refreshPlayers_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(p, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::MapObserver::bombHasBeenPlanted(const ::Bomberloutre::BombPtr& b, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Bomberloutre::BombPtr& b, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_b(b)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::MapObserver* servant = dynamic_cast< ::Bomberloutre::MapObserver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->bombHasBeenPlanted(_m_b, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Bomberloutre::BombPtr& _m_b;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__MapObserver__bombHasBeenPlanted_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(b, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::MapObserver::bombExploded(const ::Bomberloutre::BombPtr& b, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Bomberloutre::BombPtr& b, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_b(b)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::MapObserver* servant = dynamic_cast< ::Bomberloutre::MapObserver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->bombExploded(_m_b, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Bomberloutre::BombPtr& _m_b;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__MapObserver__bombExploded_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(b, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bomberloutre::MapObserver::bonusDropped(const ::Bomberloutre::BonusPtr& b, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Bomberloutre::BonusPtr& b, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_b(b)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bomberloutre::MapObserver* servant = dynamic_cast< ::Bomberloutre::MapObserver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->bonusDropped(_m_b, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Bomberloutre::BonusPtr& _m_b;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bomberloutre__MapObserver__bonusDropped_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(b, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

Bomberloutre::Map::Map(const ::std::string& __ice_id, ::Ice::Int __ice_width, ::Ice::Int __ice_height, const ::Bomberloutre::MapItems& __ice_items, const ::Bomberloutre::PlayerList& __ice_players) :
    id(__ice_id),
    width(__ice_width),
    height(__ice_height),
    items(__ice_items),
    players(__ice_players)
{
}

::Ice::ObjectPtr
Bomberloutre::Map::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__Map_ids[2] =
{
    "::Bomberloutre::Map",
    "::Ice::Object"
};

bool
Bomberloutre::Map::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__Map_ids, __Bomberloutre__Map_ids + 2, _s);
}

::std::vector< ::std::string>
Bomberloutre::Map::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__Map_ids[0], &__Bomberloutre__Map_ids[2]);
}

const ::std::string&
Bomberloutre::Map::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__Map_ids[0];
}

const ::std::string&
Bomberloutre::Map::ice_staticId()
{
    return __Bomberloutre__Map_ids[0];
}

void
Bomberloutre::Map::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Bomberloutre::Map::__usesClasses()
{
    return true;
}

void
Bomberloutre::Map::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    {
        for(::Bomberloutre::MapItems::const_iterator _i0 = items.begin(); _i0 != items.end(); ++_i0)
        {
            if((*_i0))
            {
                ::IceInternal::upCast((*_i0).get())->__addObject(_c);
            }
        }
    }
    {
        for(::Bomberloutre::PlayerList::const_iterator _i0 = players.begin(); _i0 != players.end(); ++_i0)
        {
            if((*_i0))
            {
                ::IceInternal::upCast((*_i0).get())->__addObject(_c);
            }
        }
    }
}

void
Bomberloutre::Map::__gcClear()
{
    {
        for(::Bomberloutre::MapItems::iterator _i0 = items.begin(); _i0 != items.end(); ++_i0)
        {
            if((*_i0))
            {
                if(::IceInternal::upCast((*_i0).get())->__usesClasses())
                {
                    ::IceInternal::upCast((*_i0).get())->__decRefUnsafe();
                    (*_i0).__clearHandleUnsafe();
                }
                else
                {
                    (*_i0) = 0;
                }
            }
        }
    }
    {
        for(::Bomberloutre::PlayerList::iterator _i0 = players.begin(); _i0 != players.end(); ++_i0)
        {
            if((*_i0))
            {
                if(::IceInternal::upCast((*_i0).get())->__usesClasses())
                {
                    ::IceInternal::upCast((*_i0).get())->__decRefUnsafe();
                    (*_i0).__clearHandleUnsafe();
                }
                else
                {
                    (*_i0) = 0;
                }
            }
        }
    }
}

::Ice::DispatchStatus
Bomberloutre::Map::___loadMap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string id;
    __is->read(id);
    __is->endReadEncaps();
    loadMap(id, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::Map::___checkMove(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Bomberloutre::PlayerPtr p;
    ::Bomberloutre::Point pt;
    __is->read(::Bomberloutre::__patch__PlayerPtr, &p);
    pt.__read(__is);
    __is->readPendingObjects();
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    bool __ret = checkMove(p, pt, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

static ::std::string __Bomberloutre__Map_all[] =
{
    "checkMove",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "loadMap"
};

::Ice::DispatchStatus
Bomberloutre::Map::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__Map_all, __Bomberloutre__Map_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__Map_all)
    {
        case 0:
        {
            return ___checkMove(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___loadMap(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::Map::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->write(id);
    __os->write(width);
    __os->write(height);
    if(items.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Bomberloutre::__writeMapItems(__os, &items[0], &items[0] + items.size());
    }
    if(players.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Bomberloutre::__writePlayerList(__os, &players[0], &players[0] + players.size());
    }
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Bomberloutre::Map::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->read(id);
    __is->read(width);
    __is->read(height);
    ::Bomberloutre::__readMapItems(__is, items);
    ::Bomberloutre::__readPlayerList(__is, players);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::Map::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::Map was not generated with stream support";
    throw ex;
}

void
Bomberloutre::Map::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::Map was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__MapPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::MapPtr* p = static_cast< ::Bomberloutre::MapPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::MapPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::Map::ice_staticId(), v->ice_id());
    }
}

Bomberloutre::MapClassic::MapClassic(const ::std::string& __ice_id, ::Ice::Int __ice_width, ::Ice::Int __ice_height, const ::Bomberloutre::MapItems& __ice_items, const ::Bomberloutre::PlayerList& __ice_players) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map(__ice_id, __ice_width, __ice_height, __ice_items, __ice_players)
#else
    ::Bomberloutre::Map(__ice_id, __ice_width, __ice_height, __ice_items, __ice_players)
#endif

{
}

::Ice::ObjectPtr
Bomberloutre::MapClassic::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__MapClassic_ids[3] =
{
    "::Bomberloutre::Map",
    "::Bomberloutre::MapClassic",
    "::Ice::Object"
};

bool
Bomberloutre::MapClassic::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__MapClassic_ids, __Bomberloutre__MapClassic_ids + 3, _s);
}

::std::vector< ::std::string>
Bomberloutre::MapClassic::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__MapClassic_ids[0], &__Bomberloutre__MapClassic_ids[3]);
}

const ::std::string&
Bomberloutre::MapClassic::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__MapClassic_ids[1];
}

const ::std::string&
Bomberloutre::MapClassic::ice_staticId()
{
    return __Bomberloutre__MapClassic_ids[1];
}

void
Bomberloutre::MapClassic::__gcReachable(::IceInternal::GCCountMap& _c) const
{
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__gcReachable(_c);
#else
    ::Bomberloutre::Map::__gcReachable(_c);
#endif
}

void
Bomberloutre::MapClassic::__gcClear()
{
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__gcClear();
#else
    ::Bomberloutre::Map::__gcClear();
#endif
}

static ::std::string __Bomberloutre__MapClassic_all[] =
{
    "checkMove",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "loadMap"
};

::Ice::DispatchStatus
Bomberloutre::MapClassic::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__MapClassic_all, __Bomberloutre__MapClassic_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__MapClassic_all)
    {
        case 0:
        {
            return ___checkMove(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___loadMap(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::MapClassic::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__write(__os);
#else
    ::Bomberloutre::Map::__write(__os);
#endif
}

void
Bomberloutre::MapClassic::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__read(__is, true);
#else
    ::Bomberloutre::Map::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::MapClassic::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::MapClassic was not generated with stream support";
    throw ex;
}

void
Bomberloutre::MapClassic::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::MapClassic was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__MapClassicPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::MapClassicPtr* p = static_cast< ::Bomberloutre::MapClassicPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::MapClassicPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::MapClassic::ice_staticId(), v->ice_id());
    }
}

Bomberloutre::MapSurvival::MapSurvival(const ::std::string& __ice_id, ::Ice::Int __ice_width, ::Ice::Int __ice_height, const ::Bomberloutre::MapItems& __ice_items, const ::Bomberloutre::PlayerList& __ice_players) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map(__ice_id, __ice_width, __ice_height, __ice_items, __ice_players)
#else
    ::Bomberloutre::Map(__ice_id, __ice_width, __ice_height, __ice_items, __ice_players)
#endif

{
}

::Ice::ObjectPtr
Bomberloutre::MapSurvival::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__MapSurvival_ids[3] =
{
    "::Bomberloutre::Map",
    "::Bomberloutre::MapSurvival",
    "::Ice::Object"
};

bool
Bomberloutre::MapSurvival::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__MapSurvival_ids, __Bomberloutre__MapSurvival_ids + 3, _s);
}

::std::vector< ::std::string>
Bomberloutre::MapSurvival::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__MapSurvival_ids[0], &__Bomberloutre__MapSurvival_ids[3]);
}

const ::std::string&
Bomberloutre::MapSurvival::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__MapSurvival_ids[1];
}

const ::std::string&
Bomberloutre::MapSurvival::ice_staticId()
{
    return __Bomberloutre__MapSurvival_ids[1];
}

void
Bomberloutre::MapSurvival::__gcReachable(::IceInternal::GCCountMap& _c) const
{
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__gcReachable(_c);
#else
    ::Bomberloutre::Map::__gcReachable(_c);
#endif
}

void
Bomberloutre::MapSurvival::__gcClear()
{
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__gcClear();
#else
    ::Bomberloutre::Map::__gcClear();
#endif
}

static ::std::string __Bomberloutre__MapSurvival_all[] =
{
    "checkMove",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "loadMap"
};

::Ice::DispatchStatus
Bomberloutre::MapSurvival::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__MapSurvival_all, __Bomberloutre__MapSurvival_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__MapSurvival_all)
    {
        case 0:
        {
            return ___checkMove(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___loadMap(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::MapSurvival::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__write(__os);
#else
    ::Bomberloutre::Map::__write(__os);
#endif
}

void
Bomberloutre::MapSurvival::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__read(__is, true);
#else
    ::Bomberloutre::Map::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::MapSurvival::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::MapSurvival was not generated with stream support";
    throw ex;
}

void
Bomberloutre::MapSurvival::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::MapSurvival was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__MapSurvivalPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::MapSurvivalPtr* p = static_cast< ::Bomberloutre::MapSurvivalPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::MapSurvivalPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::MapSurvival::ice_staticId(), v->ice_id());
    }
}

Bomberloutre::MapFogOfWar::MapFogOfWar(const ::std::string& __ice_id, ::Ice::Int __ice_width, ::Ice::Int __ice_height, const ::Bomberloutre::MapItems& __ice_items, const ::Bomberloutre::PlayerList& __ice_players) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map(__ice_id, __ice_width, __ice_height, __ice_items, __ice_players)
#else
    ::Bomberloutre::Map(__ice_id, __ice_width, __ice_height, __ice_items, __ice_players)
#endif

{
}

::Ice::ObjectPtr
Bomberloutre::MapFogOfWar::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__MapFogOfWar_ids[3] =
{
    "::Bomberloutre::Map",
    "::Bomberloutre::MapFogOfWar",
    "::Ice::Object"
};

bool
Bomberloutre::MapFogOfWar::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__MapFogOfWar_ids, __Bomberloutre__MapFogOfWar_ids + 3, _s);
}

::std::vector< ::std::string>
Bomberloutre::MapFogOfWar::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__MapFogOfWar_ids[0], &__Bomberloutre__MapFogOfWar_ids[3]);
}

const ::std::string&
Bomberloutre::MapFogOfWar::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__MapFogOfWar_ids[1];
}

const ::std::string&
Bomberloutre::MapFogOfWar::ice_staticId()
{
    return __Bomberloutre__MapFogOfWar_ids[1];
}

void
Bomberloutre::MapFogOfWar::__gcReachable(::IceInternal::GCCountMap& _c) const
{
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__gcReachable(_c);
#else
    ::Bomberloutre::Map::__gcReachable(_c);
#endif
}

void
Bomberloutre::MapFogOfWar::__gcClear()
{
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__gcClear();
#else
    ::Bomberloutre::Map::__gcClear();
#endif
}

static ::std::string __Bomberloutre__MapFogOfWar_all[] =
{
    "checkMove",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "loadMap"
};

::Ice::DispatchStatus
Bomberloutre::MapFogOfWar::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__MapFogOfWar_all, __Bomberloutre__MapFogOfWar_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__MapFogOfWar_all)
    {
        case 0:
        {
            return ___checkMove(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___loadMap(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::MapFogOfWar::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__write(__os);
#else
    ::Bomberloutre::Map::__write(__os);
#endif
}

void
Bomberloutre::MapFogOfWar::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Map::__read(__is, true);
#else
    ::Bomberloutre::Map::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::MapFogOfWar::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::MapFogOfWar was not generated with stream support";
    throw ex;
}

void
Bomberloutre::MapFogOfWar::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::MapFogOfWar was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__MapFogOfWarPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::MapFogOfWarPtr* p = static_cast< ::Bomberloutre::MapFogOfWarPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::MapFogOfWarPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::MapFogOfWar::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
Bomberloutre::MapObserver::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Bomberloutre__MapObserver_ids[2] =
{
    "::Bomberloutre::MapObserver",
    "::Ice::Object"
};

bool
Bomberloutre::MapObserver::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bomberloutre__MapObserver_ids, __Bomberloutre__MapObserver_ids + 2, _s);
}

::std::vector< ::std::string>
Bomberloutre::MapObserver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bomberloutre__MapObserver_ids[0], &__Bomberloutre__MapObserver_ids[2]);
}

const ::std::string&
Bomberloutre::MapObserver::ice_id(const ::Ice::Current&) const
{
    return __Bomberloutre__MapObserver_ids[0];
}

const ::std::string&
Bomberloutre::MapObserver::ice_staticId()
{
    return __Bomberloutre__MapObserver_ids[0];
}

::Ice::DispatchStatus
Bomberloutre::MapObserver::___refreshAll(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Bomberloutre::MapPtr m;
    __is->read(::Bomberloutre::__patch__MapPtr, &m);
    __is->readPendingObjects();
    __is->endReadEncaps();
    refreshAll(m, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::MapObserver::___refreshPlayers(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Bomberloutre::PlayerList p;
    ::Bomberloutre::__readPlayerList(__is, p);
    __is->readPendingObjects();
    __is->endReadEncaps();
    refreshPlayers(p, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::MapObserver::___bombHasBeenPlanted(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Bomberloutre::BombPtr b;
    __is->read(::Bomberloutre::__patch__BombPtr, &b);
    __is->readPendingObjects();
    __is->endReadEncaps();
    bombHasBeenPlanted(b, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::MapObserver::___bombExploded(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Bomberloutre::BombPtr b;
    __is->read(::Bomberloutre::__patch__BombPtr, &b);
    __is->readPendingObjects();
    __is->endReadEncaps();
    bombExploded(b, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Bomberloutre::MapObserver::___bonusDropped(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Bomberloutre::BonusPtr b;
    __is->read(::Bomberloutre::__patch__BonusPtr, &b);
    __is->readPendingObjects();
    __is->endReadEncaps();
    bonusDropped(b, __current);
    return ::Ice::DispatchOK;
}

static ::std::string __Bomberloutre__MapObserver_all[] =
{
    "bombExploded",
    "bombHasBeenPlanted",
    "bonusDropped",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "refreshAll",
    "refreshPlayers"
};

::Ice::DispatchStatus
Bomberloutre::MapObserver::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Bomberloutre__MapObserver_all, __Bomberloutre__MapObserver_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bomberloutre__MapObserver_all)
    {
        case 0:
        {
            return ___bombExploded(in, current);
        }
        case 1:
        {
            return ___bombHasBeenPlanted(in, current);
        }
        case 2:
        {
            return ___bonusDropped(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___refreshAll(in, current);
        }
        case 8:
        {
            return ___refreshPlayers(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bomberloutre::MapObserver::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Bomberloutre::MapObserver::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Bomberloutre::MapObserver::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::MapObserver was not generated with stream support";
    throw ex;
}

void
Bomberloutre::MapObserver::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Bomberloutre::MapObserver was not generated with stream support";
    throw ex;
}
#endif

void 
Bomberloutre::__patch__MapObserverPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Bomberloutre::MapObserverPtr* p = static_cast< ::Bomberloutre::MapObserverPtr*>(__addr);
    assert(p);
    *p = ::Bomberloutre::MapObserverPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Bomberloutre::MapObserver::ice_staticId(), v->ice_id());
    }
}
